# coding: utf-8
=begin rdoc
This is the detailed mapper constructs for
FXRuby.

== Internal Docs
Note that normally you should not need to know these details.

=== Excution Flow
when you declare fx_app and all the nested delacrations,
they are initially noted in a tree of OS (OpenStruct) objects,
and then later the actual underlying FXRuby (and subsequently,
FOX Objects) are created. At this point the resultant objects
are plugged into the OS objects so they can be referenced.

So there are 3 phases:
# Construction of the OS tree (through your declaractions)
# Construction of the FXRuby objects
# Construction of the underlying FOX Objects at activation time.

A stack-based method is used to keep track of all of this during
the construction of the OS tree.

=== Issues
For many FOX / FXRuby operations, you will need the FXApp object.
If you used full composition (via fx_app), the base object will be
the FXApp object. If, on the other hand, you used compose inside
of a declared FXRuby-derived class, base will be set to the first
declared component. 

Normally this is not a problem, unless you use ingress_handler,
in which case it will not know how to find the FXApp object.

=== Conventions
* pos -- Parent OpenStruct object

== NOTE WELL
  This file is generated by fxruby-enhancement.
  Do NOT modify this file. Modify the ERB template
  file instead, and run 'rake scrape'.
=end

module Fox

   class FX4Splitter
     include Enhancement
     attr_accessor :_o
   end

   class EFX4Splitter < FX4Splitter
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FOURSPLITTER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), tgt=(defined?(@@_tgt)?@@_tgt:nil), sel=(defined?(@@_sel)?@@_sel:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FOURSPLITTER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFX4Splitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         
             
         def p var; @@_p = var; end
             
         def tgt var; @@_tgt = var; end
             
         def sel var; @@_sel = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FX7Segment
     include Enhancement
     attr_accessor :_o
   end

   class EFX7Segment < FX7Segment
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SEVENSEGMENT_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFX7Segment, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXAccelTable
     include Enhancement
     attr_accessor :_o
   end

   class EFXAccelTable < FXAccelTable
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXAccelTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXEvent
     include Enhancement
     attr_accessor :_o
   end

   class EFXEvent < FXEvent
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXEvent, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXApp
     include Enhancement
     attr_accessor :_o
   end

   class EFXApp < FXApp
     
     
     def initialize(appName=(defined?(@@_appName)?@@_appName:nil) || "Application", vendorName=(defined?(@@_vendorName)?@@_vendorName:nil) || "FoxDefault")
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXApp, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app_name var; @@_appName = var; end
             
         def vendor_name var; @@_vendorName = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXArrowButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXArrowButton < FXArrowButton
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || ARROW_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXArrowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXBMPIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXBMPIcon < FXBMPIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || Fox.FXRGB(192,192,192), opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXBMPIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXBMPImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXBMPImage < FXBMPImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXBMPImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXBitmap
     include Enhancement
     attr_accessor :_o
   end

   class EFXBitmap < FXBitmap
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXBitmap, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def pixels var; @@_pixels = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXBitmapFrame
     include Enhancement
     attr_accessor :_o
   end

   class EFXBitmapFrame < FXBitmapFrame
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), bmp=(defined?(@@_bmp)?@@_bmp:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXBitmapFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def bmp var; @@_bmp = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXBitmapView
     include Enhancement
     attr_accessor :_o
   end

   class EFXBitmapView < FXBitmapView
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), bmp=(defined?(@@_bmp)?@@_bmp:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXBitmapView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def bmp var; @@_bmp = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXButton < FXButton
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || BUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXCURCursor
     include Enhancement
     attr_accessor :_o
   end

   class EFXCURCursor < FXCURCursor
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXCURCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def pixels var; @@_pixels = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXCanvas
     include Enhancement
     attr_accessor :_o
   end

   class EFXCanvas < FXCanvas
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXCheckButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXCheckButton < FXCheckButton
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || CHECKBUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXCheckButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXChoiceBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXChoiceBox < FXChoiceBox
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil), choices=(defined?(@@_choices)?@@_choices:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXChoiceBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def choices var; @@_choices = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorBar < FXColorBar
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorDialog < FXColorDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), title=(defined?(@@_title)?@@_title:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def title var; @@_title = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorItem < FXColorItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), clr=(defined?(@@_clr)?@@_clr:nil), data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def clr var; @@_clr = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorList
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorList < FXColorList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || LIST_BROWSESELECT, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorRing
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorRing < FXColorRing
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorRing, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorSelector
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorSelector < FXColorSelector
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorWell
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorWell < FXColorWell
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), color=(defined?(@@_color)?@@_color:nil) || 0, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || COLORWELL_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorWell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def color var; @@_color = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXColorWheel
     include Enhancement
     attr_accessor :_o
   end

   class EFXColorWheel < FXColorWheel
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXColorWheel, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXComboBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXComboBox < FXComboBox
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), cols=(defined?(@@_cols)?@@_cols:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || COMBOBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXComboBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def cols var; @@_cols = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXComposite
     include Enhancement
     attr_accessor :_o
   end

   class EFXComposite < FXComposite
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXComposite, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXCursor
     include Enhancement
     attr_accessor :_o
   end

   class EFXCursor < FXCursor
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), curid=(defined?(@@_curid)?@@_curid:nil) || CURSOR_ARROW)
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil), width=(defined?(@@_width)?@@_width:nil) || 32, height=(defined?(@@_height)?@@_height:nil) || 32, hotX=(defined?(@@_hotX)?@@_hotX:nil) || -1, hotY=(defined?(@@_hotY)?@@_hotY:nil) || -1)
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil), width=(defined?(@@_width)?@@_width:nil) || 32, height=(defined?(@@_height)?@@_height:nil) || 32, hotX=(defined?(@@_hotX)?@@_hotX:nil) || -1, hotY=(defined?(@@_hotY)?@@_hotY:nil) || -1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def curid var; @@_curid = var; end
             
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def hot_x var; @@_hotX = var; end
             
         def hot_y var; @@_hotY = var; end
             
         
             
         def a var; @@_a = var; end
             
         def pixels var; @@_pixels = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def hot_x var; @@_hotX = var; end
             
         def hot_y var; @@_hotY = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSegment
     include Enhancement
     attr_accessor :_o
   end

   class EFXSegment < FXSegment
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSegment, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXArc
     include Enhancement
     attr_accessor :_o
   end

   class EFXArc < FXArc
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXArc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDC
     include Enhancement
     attr_accessor :_o
   end

   class EFXDC < FXDC
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDC, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPSBounds
     include Enhancement
     attr_accessor :_o
   end

   class EFXPSBounds < FXPSBounds
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPSBounds, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPrinter
     include Enhancement
     attr_accessor :_o
   end

   class EFXPrinter < FXPrinter
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPrinter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDCPrint
     include Enhancement
     attr_accessor :_o
   end

   class EFXDCPrint < FXDCPrint
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDCPrint, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDCWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXDCWindow < FXDCWindow
     
     
     def initialize(drawable=(defined?(@@_drawable)?@@_drawable:nil), event=(defined?(@@_event)?@@_event:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDCWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def drawable var; @@_drawable = var; end
             
         def event var; @@_event = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDataTarget
     include Enhancement
     attr_accessor :_o
   end

   class EFXDataTarget < FXDataTarget
     
     
     def initialize(value=(defined?(@@_value)?@@_value:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDataTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def value var; @@_value = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDebugTarget
     include Enhancement
     attr_accessor :_o
   end

   class EFXDebugTarget < FXDebugTarget
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDebugTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDelegator
     include Enhancement
     attr_accessor :_o
   end

   class EFXDelegator < FXDelegator
     
     
     def initialize(delegate=(defined?(@@_delegate)?@@_delegate:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDelegator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def delegate var; @@_delegate = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDial
     include Enhancement
     attr_accessor :_o
   end

   class EFXDial < FXDial
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || DIAL_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDial, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDialogBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXDialogBox < FXDialogBox
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), title=(defined?(@@_title)?@@_title:nil), opts=(defined?(@@_opts)?@@_opts:nil) || DECOR_TITLE|DECOR_BORDER, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 10, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 10, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 10, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 10, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 4, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 4)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDialogBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def title var; @@_title = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDict
     include Enhancement
     attr_accessor :_o
   end

   class EFXDict < FXDict
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDirBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXDirBox < FXDirBox
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDirBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDirDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXDirDialog < FXDirDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), name=(defined?(@@_name)?@@_name:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 500, height=(defined?(@@_height)?@@_height:nil) || 300)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDirDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def name var; @@_name = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDirItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXDirItem < FXDirItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), oi=(defined?(@@_oi)?@@_oi:nil) || nil, ci=(defined?(@@_ci)?@@_ci:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDirItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def oi var; @@_oi = var; end
             
         def ci var; @@_ci = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDirList
     include Enhancement
     attr_accessor :_o
   end

   class EFXDirList < FXDirList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDirList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDirSelector
     include Enhancement
     attr_accessor :_o
   end

   class EFXDirSelector < FXDirSelector
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDirSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDockBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXDockBar < FXDockBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), q=(defined?(@@_q)?@@_q:nil), opts=(defined?(@@_opts)?@@_opts:nil) || LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDockBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def q var; @@_q = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDockHandler
     include Enhancement
     attr_accessor :_o
   end

   class EFXDockHandler < FXDockHandler
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), tgt=(defined?(@@_tgt)?@@_tgt:nil), sel=(defined?(@@_sel)?@@_sel:nil), opts=(defined?(@@_opts)?@@_opts:nil), x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), w=(defined?(@@_w)?@@_w:nil), h=(defined?(@@_h)?@@_h:nil), pl=(defined?(@@_pl)?@@_pl:nil), pr=(defined?(@@_pr)?@@_pr:nil), pt=(defined?(@@_pt)?@@_pt:nil), pb=(defined?(@@_pb)?@@_pb:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDockHandler, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def tgt var; @@_tgt = var; end
             
         def sel var; @@_sel = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def w var; @@_w = var; end
             
         def h var; @@_h = var; end
             
         def pl var; @@_pl = var; end
             
         def pr var; @@_pr = var; end
             
         def pt var; @@_pt = var; end
             
         def pb var; @@_pb = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDockSite
     include Enhancement
     attr_accessor :_o
   end

   class EFXDockSite < FXDockSite
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 0, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDockSite, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDockTitle
     include Enhancement
     attr_accessor :_o
   end

   class EFXDockTitle < FXDockTitle
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL|JUSTIFY_CENTER_X|JUSTIFY_CENTER_Y, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDockTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDocument
     include Enhancement
     attr_accessor :_o
   end

   class EFXDocument < FXDocument
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDocument, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDragCorner
     include Enhancement
     attr_accessor :_o
   end

   class EFXDragCorner < FXDragCorner
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDragCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDrawable
     include Enhancement
     attr_accessor :_o
   end

   class EFXDrawable < FXDrawable
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDrawable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXDriveBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXDriveBox < FXDriveBox
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXDriveBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXExtentd
     include Enhancement
     attr_accessor :_o
   end

   class EFXExtentd < FXExtentd
     
     
     def initialize(ext=(defined?(@@_ext)?@@_ext:nil))
       super
     end
     
     def initialize(lo=(defined?(@@_lo)?@@_lo:nil), hi=(defined?(@@_hi)?@@_hi:nil))
       super
     end
     
     def initialize(xlo=(defined?(@@_xlo)?@@_xlo:nil), xhi=(defined?(@@_xhi)?@@_xhi:nil), ylo=(defined?(@@_ylo)?@@_ylo:nil), yhi=(defined?(@@_yhi)?@@_yhi:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXExtentd, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def ext var; @@_ext = var; end
             
         
             
         def lo var; @@_lo = var; end
             
         def hi var; @@_hi = var; end
             
         
             
         def xlo var; @@_xlo = var; end
             
         def xhi var; @@_xhi = var; end
             
         def ylo var; @@_ylo = var; end
             
         def yhi var; @@_yhi = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXExtentf
     include Enhancement
     attr_accessor :_o
   end

   class EFXExtentf < FXExtentf
     
     
     def initialize(ext=(defined?(@@_ext)?@@_ext:nil))
       super
     end
     
     def initialize(lo=(defined?(@@_lo)?@@_lo:nil), hi=(defined?(@@_hi)?@@_hi:nil))
       super
     end
     
     def initialize(xlo=(defined?(@@_xlo)?@@_xlo:nil), xhi=(defined?(@@_xhi)?@@_xhi:nil), ylo=(defined?(@@_ylo)?@@_ylo:nil), yhi=(defined?(@@_yhi)?@@_yhi:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXExtentf, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def ext var; @@_ext = var; end
             
         
             
         def lo var; @@_lo = var; end
             
         def hi var; @@_hi = var; end
             
         
             
         def xlo var; @@_xlo = var; end
             
         def xhi var; @@_xhi = var; end
             
         def ylo var; @@_ylo = var; end
             
         def yhi var; @@_yhi = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileDialog < FXFileDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), name=(defined?(@@_name)?@@_name:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 500, height=(defined?(@@_height)?@@_height:nil) || 300)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def name var; @@_name = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileAssoc
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileAssoc < FXFileAssoc
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileAssoc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileDict
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileDict < FXFileDict
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), db=(defined?(@@_db)?@@_db:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def db var; @@_db = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileItem < FXFileItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), bi=(defined?(@@_bi)?@@_bi:nil) || nil, mi=(defined?(@@_mi)?@@_mi:nil) || nil, ptr=(defined?(@@_ptr)?@@_ptr:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def bi var; @@_bi = var; end
             
         def mi var; @@_mi = var; end
             
         def ptr var; @@_ptr = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileList
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileList < FXFileList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileSelector
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileSelector < FXFileSelector
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFileStream
     include Enhancement
     attr_accessor :_o
   end

   class EFXFileStream < FXFileStream
     
     
     def initialize(cont=(defined?(@@_cont)?@@_cont:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFileStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def cont var; @@_cont = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFoldingItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXFoldingItem < FXFoldingItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), openIcon=(defined?(@@_openIcon)?@@_openIcon:nil) || nil, closedIcon=(defined?(@@_closedIcon)?@@_closedIcon:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFoldingItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def open_icon var; @@_openIcon = var; end
             
         def closed_icon var; @@_closedIcon = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFoldingList
     include Enhancement
     attr_accessor :_o
   end

   class EFXFoldingList < FXFoldingList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TREELIST_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFoldingList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFontDesc
     include Enhancement
     attr_accessor :_o
   end

   class EFXFontDesc < FXFontDesc
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFontDesc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFont
     include Enhancement
     attr_accessor :_o
   end

   class EFXFont < FXFont
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), fontDesc=(defined?(@@_fontDesc)?@@_fontDesc:nil))
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), face=(defined?(@@_face)?@@_face:nil), size=(defined?(@@_size)?@@_size:nil), weight=(defined?(@@_weight)?@@_weight:nil) || FXFont::Normal, slant=(defined?(@@_slant)?@@_slant:nil) || Font::Straight, encoding=(defined?(@@_encoding)?@@_encoding:nil) || FONTENCODING_DEFAULT, setWidth=(defined?(@@_setWidth)?@@_setWidth:nil) || FXFont::NonExpanded, hints=(defined?(@@_hints)?@@_hints:nil) || 0)
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), string=(defined?(@@_string)?@@_string:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFont, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def font_desc var; @@_fontDesc = var; end
             
         
             
         def a var; @@_a = var; end
             
         def face var; @@_face = var; end
             
         def size var; @@_size = var; end
             
         def weight var; @@_weight = var; end
             
         def slant var; @@_slant = var; end
             
         def encoding var; @@_encoding = var; end
             
         def set_width var; @@_setWidth = var; end
             
         def hints var; @@_hints = var; end
             
         
             
         def a var; @@_a = var; end
             
         def string var; @@_string = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFontDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXFontDialog < FXFontDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), name=(defined?(@@_name)?@@_name:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 600, height=(defined?(@@_height)?@@_height:nil) || 380)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFontDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def name var; @@_name = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFontSelector
     include Enhancement
     attr_accessor :_o
   end

   class EFXFontSelector < FXFontSelector
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFontSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXFrame
     include Enhancement
     attr_accessor :_o
   end

   class EFXFrame < FXFrame
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGIFCursor
     include Enhancement
     attr_accessor :_o
   end

   class EFXGIFCursor < FXGIFCursor
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil), hx=(defined?(@@_hx)?@@_hx:nil) || -1, hy=(defined?(@@_hy)?@@_hy:nil) || -1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGIFCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def hx var; @@_hx = var; end
             
         def hy var; @@_hy = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGIFIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXGIFIcon < FXGIFIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGIFImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXGIFImage < FXGIFImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLCanvas
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLCanvas < FXGLCanvas
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), vis=(defined?(@@_vis)?@@_vis:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), vis=(defined?(@@_vis)?@@_vis:nil), sharegroup=(defined?(@@_sharegroup)?@@_sharegroup:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def vis var; @@_vis = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         
             
         def parent var; @@_parent = var; end
             
         def vis var; @@_vis = var; end
             
         def sharegroup var; @@_sharegroup = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLContext
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLContext < FXGLContext
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), visual=(defined?(@@_visual)?@@_visual:nil), other=(defined?(@@_other)?@@_other:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLContext, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def visual var; @@_visual = var; end
             
         def other var; @@_other = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLObject
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLObject < FXGLObject
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLShape
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLShape < FXGLShape
     
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), z=(defined?(@@_z)?@@_z:nil), opts=(defined?(@@_opts)?@@_opts:nil), front=(defined?(@@_front)?@@_front:nil) || nil, back=(defined?(@@_back)?@@_back:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLShape, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def z var; @@_z = var; end
             
         def opts var; @@_opts = var; end
             
         def front var; @@_front = var; end
             
         def back var; @@_back = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXViewport
     include Enhancement
     attr_accessor :_o
   end

   class EFXViewport < FXViewport
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXViewport, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXLight
     include Enhancement
     attr_accessor :_o
   end

   class EFXLight < FXLight
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXLight, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMaterial
     include Enhancement
     attr_accessor :_o
   end

   class EFXMaterial < FXMaterial
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMaterial, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLViewer
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLViewer < FXGLViewer
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), vis=(defined?(@@_vis)?@@_vis:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), vis=(defined?(@@_vis)?@@_vis:nil), sharegroup=(defined?(@@_sharegroup)?@@_sharegroup:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLViewer, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def vis var; @@_vis = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         
             
         def p var; @@_p = var; end
             
         def vis var; @@_vis = var; end
             
         def sharegroup var; @@_sharegroup = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGLVisual
     include Enhancement
     attr_accessor :_o
   end

   class EFXGLVisual < FXGLVisual
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), flags=(defined?(@@_flags)?@@_flags:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGLVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def flags var; @@_flags = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGradient
     include Enhancement
     attr_accessor :_o
   end

   class EFXGradient < FXGradient
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGradient, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGradientBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXGradientBar < FXGradientBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGradientBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXGroupBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXGroupBox < FXGroupBox
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), opts=(defined?(@@_opts)?@@_opts:nil) || GROUPBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXGroupBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXHeaderItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXHeaderItem < FXHeaderItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, s=(defined?(@@_s)?@@_s:nil) || 0, ptr=(defined?(@@_ptr)?@@_ptr:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXHeaderItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def s var; @@_s = var; end
             
         def ptr var; @@_ptr = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXHeader
     include Enhancement
     attr_accessor :_o
   end

   class EFXHeader < FXHeader
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || HEADER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXHorizontalFrame
     include Enhancement
     attr_accessor :_o
   end

   class EFXHorizontalFrame < FXHorizontalFrame
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXHorizontalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXICOIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXICOIcon < FXICOIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXICOIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXICOImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXICOImage < FXICOImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXICOImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXIcon < FXIcon
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXIconDict
     include Enhancement
     attr_accessor :_o
   end

   class EFXIconDict < FXIconDict
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXIconDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXIconItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXIconItem < FXIconItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), bigIcon=(defined?(@@_bigIcon)?@@_bigIcon:nil) || nil, miniIcon=(defined?(@@_miniIcon)?@@_miniIcon:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXIconItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def big_icon var; @@_bigIcon = var; end
             
         def mini_icon var; @@_miniIcon = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXIconList
     include Enhancement
     attr_accessor :_o
   end

   class EFXIconList < FXIconList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || ICONLIST_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXIconList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXIconSource
     include Enhancement
     attr_accessor :_o
   end

   class EFXIconSource < FXIconSource
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXIconSource, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXId
     include Enhancement
     attr_accessor :_o
   end

   class EFXId < FXId
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXId, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXImage < FXImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pixels var; @@_pixels = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXImageFrame
     include Enhancement
     attr_accessor :_o
   end

   class EFXImageFrame < FXImageFrame
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), img=(defined?(@@_img)?@@_img:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXImageFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def img var; @@_img = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXImageView
     include Enhancement
     attr_accessor :_o
   end

   class EFXImageView < FXImageView
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), img=(defined?(@@_img)?@@_img:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXImageView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def img var; @@_img = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXInputDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXInputDialog < FXInputDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), label=(defined?(@@_label)?@@_label:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || INPUTDIALOG_STRING, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXInputDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def label var; @@_label = var; end
             
         def icon var; @@_icon = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXJPGIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXJPGIcon < FXJPGIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1, quality=(defined?(@@_quality)?@@_quality:nil) || 75)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXJPGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def quality var; @@_quality = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXJPGImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXJPGImage < FXJPGImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1, quality=(defined?(@@_quality)?@@_quality:nil) || 75)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXJPGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def quality var; @@_quality = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXKnob
     include Enhancement
     attr_accessor :_o
   end

   class EFXKnob < FXKnob
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || KNOB_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXKnob, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXLabel
     include Enhancement
     attr_accessor :_o
   end

   class EFXLabel < FXLabel
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || LABEL_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXLabel, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXListItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXListItem < FXListItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXListItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXList
     include Enhancement
     attr_accessor :_o
   end

   class EFXList < FXList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || LIST_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXListBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXListBox < FXListBox
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIDeleteButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIDeleteButton < FXMDIDeleteButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIDeleteButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIRestoreButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIRestoreButton < FXMDIRestoreButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIRestoreButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIMaximizeButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIMaximizeButton < FXMDIMaximizeButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIMaximizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIMinimizeButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIMinimizeButton < FXMDIMinimizeButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIMinimizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIWindowButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIWindowButton < FXMDIWindowButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), pup=(defined?(@@_pup)?@@_pup:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIWindowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def pup var; @@_pup = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIMenu
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIMenu < FXMDIMenu
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), target=(defined?(@@_target)?@@_target:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def target var; @@_target = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIChild
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIChild < FXMDIChild
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), name=(defined?(@@_name)?@@_name:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, pup=(defined?(@@_pup)?@@_pup:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIChild, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def name var; @@_name = var; end
             
         def ic var; @@_ic = var; end
             
         def pup var; @@_pup = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMDIClient
     include Enhancement
     attr_accessor :_o
   end

   class EFXMDIClient < FXMDIClient
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMDIClient, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMainWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXMainWindow < FXMainWindow
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), title=(defined?(@@_title)?@@_title:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, miniIcon=(defined?(@@_miniIcon)?@@_miniIcon:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || DECOR_ALL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 4, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 4)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMainWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def title var; @@_title = var; end
             
         def icon var; @@_icon = var; end
             
         def mini_icon var; @@_miniIcon = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMatrix
     include Enhancement
     attr_accessor :_o
   end

   class EFXMatrix < FXMatrix
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), n=(defined?(@@_n)?@@_n:nil) || 1, opts=(defined?(@@_opts)?@@_opts:nil) || MATRIX_BY_ROWS, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMatrix, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def n var; @@_n = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMemoryBuffer
     include Enhancement
     attr_accessor :_o
   end

   class EFXMemoryBuffer < FXMemoryBuffer
     
     
     def initialize(data=(defined?(@@_data)?@@_data:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMemoryBuffer, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMemoryStream
     include Enhancement
     attr_accessor :_o
   end

   class EFXMemoryStream < FXMemoryStream
     
     
     def initialize(cont=(defined?(@@_cont)?@@_cont:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMemoryStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def cont var; @@_cont = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuBar < FXMenuBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), q=(defined?(@@_q)?@@_q:nil), opts=(defined?(@@_opts)?@@_opts:nil) || LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil), x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def q var; @@_q = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuButton < FXMenuButton
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, popupMenu=(defined?(@@_popupMenu)?@@_popupMenu:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || JUSTIFY_NORMAL|ICON_BEFORE_TEXT|MENUBUTTON_DOWN, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def popup_menu var; @@_popupMenu = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuCaption
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuCaption < FXMenuCaption
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuCaption, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuCascade
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuCascade < FXMenuCascade
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, popupMenu=(defined?(@@_popupMenu)?@@_popupMenu:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuCascade, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def popup_menu var; @@_popupMenu = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuCheck
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuCheck < FXMenuCheck
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuCheck, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuCommand
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuCommand < FXMenuCommand
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuCommand, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuPane
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuPane < FXMenuPane
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuRadio
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuRadio < FXMenuRadio
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuRadio, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuSeparator
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuSeparator < FXMenuSeparator
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMenuTitle
     include Enhancement
     attr_accessor :_o
   end

   class EFXMenuTitle < FXMenuTitle
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, popupMenu=(defined?(@@_popupMenu)?@@_popupMenu:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMenuTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def popup_menu var; @@_popupMenu = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXMessageBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXMessageBox < FXMessageBox
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXMessageBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXObject
     include Enhancement
     attr_accessor :_o
   end

   class EFXObject < FXObject
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXOption
     include Enhancement
     attr_accessor :_o
   end

   class EFXOption < FXOption
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || JUSTIFY_NORMAL|ICON_BEFORE_TEXT, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXOption, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXOptionMenu
     include Enhancement
     attr_accessor :_o
   end

   class EFXOptionMenu < FXOptionMenu
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), pup=(defined?(@@_pup)?@@_pup:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || JUSTIFY_NORMAL|ICON_BEFORE_TEXT, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXOptionMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def pup var; @@_pup = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPCXIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXPCXIcon < FXPCXIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPCXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPCXImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXPCXImage < FXPCXImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPCXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPNGIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXPNGIcon < FXPNGIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPNGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPNGImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXPNGImage < FXPNGImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPNGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPPMIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXPPMIcon < FXPPMIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPPMImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXPPMImage < FXPPMImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPacker
     include Enhancement
     attr_accessor :_o
   end

   class EFXPacker < FXPacker
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPacker, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPicker
     include Enhancement
     attr_accessor :_o
   end

   class EFXPicker < FXPicker
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || BUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPicker, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPopup
     include Enhancement
     attr_accessor :_o
   end

   class EFXPopup < FXPopup
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), opts=(defined?(@@_opts)?@@_opts:nil) || POPUP_VERTICAL|FRAME_RAISED|FRAME_THICK, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPopup, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXPrintDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXPrintDialog < FXPrintDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), name=(defined?(@@_name)?@@_name:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXPrintDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def name var; @@_name = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXProgressBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXProgressBar < FXProgressBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || PROGRESSBAR_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXProgressBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXProgressDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXProgressDialog < FXProgressDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), label=(defined?(@@_label)?@@_label:nil), opts=(defined?(@@_opts)?@@_opts:nil) || PROGRESSDIALOG_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXProgressDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def label var; @@_label = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXQuatd
     include Enhancement
     attr_accessor :_o
   end

   class EFXQuatd < FXQuatd
     
     
     def initialize(axis=(defined?(@@_axis)?@@_axis:nil), phi=(defined?(@@_phi)?@@_phi:nil) || 0.0)
       super
     end
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), z=(defined?(@@_z)?@@_z:nil), w=(defined?(@@_w)?@@_w:nil))
       super
     end
     
     def initialize(floats=(defined?(@@_floats)?@@_floats:nil))
       super
     end
     
     def initialize(roll=(defined?(@@_roll)?@@_roll:nil), pitch=(defined?(@@_pitch)?@@_pitch:nil), yaw=(defined?(@@_yaw)?@@_yaw:nil))
       super
     end
     
     def initialize(ex=(defined?(@@_ex)?@@_ex:nil), ey=(defined?(@@_ey)?@@_ey:nil), ez=(defined?(@@_ez)?@@_ez:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXQuatd, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def axis var; @@_axis = var; end
             
         def phi var; @@_phi = var; end
             
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def z var; @@_z = var; end
             
         def w var; @@_w = var; end
             
         
             
         def floats var; @@_floats = var; end
             
         
             
         def roll var; @@_roll = var; end
             
         def pitch var; @@_pitch = var; end
             
         def yaw var; @@_yaw = var; end
             
         
             
         def ex var; @@_ex = var; end
             
         def ey var; @@_ey = var; end
             
         def ez var; @@_ez = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXQuatf
     include Enhancement
     attr_accessor :_o
   end

   class EFXQuatf < FXQuatf
     
     
     def initialize(axis=(defined?(@@_axis)?@@_axis:nil), phi=(defined?(@@_phi)?@@_phi:nil) || 0.0)
       super
     end
     
     def initialize(roll=(defined?(@@_roll)?@@_roll:nil), pitch=(defined?(@@_pitch)?@@_pitch:nil), yaw=(defined?(@@_yaw)?@@_yaw:nil))
       super
     end
     
     def initialize(ex=(defined?(@@_ex)?@@_ex:nil), ey=(defined?(@@_ey)?@@_ey:nil), ez=(defined?(@@_ez)?@@_ez:nil))
       super
     end
     
     def initialize(mat=(defined?(@@_mat)?@@_mat:nil))
       super
     end
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), z=(defined?(@@_z)?@@_z:nil), w=(defined?(@@_w)?@@_w:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXQuatf, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def axis var; @@_axis = var; end
             
         def phi var; @@_phi = var; end
             
         
             
         def roll var; @@_roll = var; end
             
         def pitch var; @@_pitch = var; end
             
         def yaw var; @@_yaw = var; end
             
         
             
         def ex var; @@_ex = var; end
             
         def ey var; @@_ey = var; end
             
         def ez var; @@_ez = var; end
             
         
             
         def mat var; @@_mat = var; end
             
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def z var; @@_z = var; end
             
         def w var; @@_w = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRGBIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXRGBIcon < FXRGBIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRGBIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRGBImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXRGBImage < FXRGBImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRGBImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRadioButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXRadioButton < FXRadioButton
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), text=(defined?(@@_text)?@@_text:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || RADIOBUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRadioButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def text var; @@_text = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRanged
     include Enhancement
     attr_accessor :_o
   end

   class EFXRanged < FXRanged
     
     
     def initialize(xlo=(defined?(@@_xlo)?@@_xlo:nil) || 0.0, xhi=(defined?(@@_xhi)?@@_xhi:nil) || 0.0, ylo=(defined?(@@_ylo)?@@_ylo:nil) || 0.0, yhi=(defined?(@@_yhi)?@@_yhi:nil) || 0.0, zlo=(defined?(@@_zlo)?@@_zlo:nil) || 0.0, zhi=(defined?(@@_zhi)?@@_zhi:nil) || 0.0)
       super
     end
     
     def initialize(bounds=(defined?(@@_bounds)?@@_bounds:nil))
       super
     end
     
     def initialize(sphere=(defined?(@@_sphere)?@@_sphere:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRanged, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xlo var; @@_xlo = var; end
             
         def xhi var; @@_xhi = var; end
             
         def ylo var; @@_ylo = var; end
             
         def yhi var; @@_yhi = var; end
             
         def zlo var; @@_zlo = var; end
             
         def zhi var; @@_zhi = var; end
             
         
             
         def bounds var; @@_bounds = var; end
             
         
             
         def sphere var; @@_sphere = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRangef
     include Enhancement
     attr_accessor :_o
   end

   class EFXRangef < FXRangef
     
     
     def initialize(xlo=(defined?(@@_xlo)?@@_xlo:nil) || 0.0, xhi=(defined?(@@_xhi)?@@_xhi:nil) || 0.0, ylo=(defined?(@@_ylo)?@@_ylo:nil) || 0.0, yhi=(defined?(@@_yhi)?@@_yhi:nil) || 0.0, zlo=(defined?(@@_zlo)?@@_zlo:nil) || 0.0, zhi=(defined?(@@_zhi)?@@_zhi:nil) || 0.0)
       super
     end
     
     def initialize(bounds=(defined?(@@_bounds)?@@_bounds:nil))
       super
     end
     
     def initialize(sphere=(defined?(@@_sphere)?@@_sphere:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRangef, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xlo var; @@_xlo = var; end
             
         def xhi var; @@_xhi = var; end
             
         def ylo var; @@_ylo = var; end
             
         def yhi var; @@_yhi = var; end
             
         def zlo var; @@_zlo = var; end
             
         def zhi var; @@_zhi = var; end
             
         
             
         def bounds var; @@_bounds = var; end
             
         
             
         def sphere var; @@_sphere = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRealSlider
     include Enhancement
     attr_accessor :_o
   end

   class EFXRealSlider < FXRealSlider
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || REALSLIDER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRealSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRealSpinner
     include Enhancement
     attr_accessor :_o
   end

   class EFXRealSpinner < FXRealSpinner
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), cols=(defined?(@@_cols)?@@_cols:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || REALSPIN_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRealSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def cols var; @@_cols = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRecentFiles
     include Enhancement
     attr_accessor :_o
   end

   class EFXRecentFiles < FXRecentFiles
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil))
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), gp=(defined?(@@_gp)?@@_gp:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRecentFiles, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         
             
         def a var; @@_a = var; end
             
         def gp var; @@_gp = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRectangle
     include Enhancement
     attr_accessor :_o
   end

   class EFXRectangle < FXRectangle
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil), yy=(defined?(@@_yy)?@@_yy:nil), ww=(defined?(@@_ww)?@@_ww:nil), hh=(defined?(@@_hh)?@@_hh:nil))
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), s=(defined?(@@_s)?@@_s:nil))
       super
     end
     
     def initialize(topleft=(defined?(@@_topleft)?@@_topleft:nil), bottomright=(defined?(@@_bottomright)?@@_bottomright:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRectangle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
         def ww var; @@_ww = var; end
             
         def hh var; @@_hh = var; end
             
         
             
         def p var; @@_p = var; end
             
         def s var; @@_s = var; end
             
         
             
         def topleft var; @@_topleft = var; end
             
         def bottomright var; @@_bottomright = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRegion
     include Enhancement
     attr_accessor :_o
   end

   class EFXRegion < FXRegion
     
     
     def initialize(r=(defined?(@@_r)?@@_r:nil))
       super
     end
     
     def initialize(rect=(defined?(@@_rect)?@@_rect:nil))
       super
     end
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), w=(defined?(@@_w)?@@_w:nil), h=(defined?(@@_h)?@@_h:nil))
       super
     end
     
     def initialize(points=(defined?(@@_points)?@@_points:nil), winding=(defined?(@@_winding)?@@_winding:nil) || false)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRegion, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def r var; @@_r = var; end
             
         
             
         def rect var; @@_rect = var; end
             
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def w var; @@_w = var; end
             
         def h var; @@_h = var; end
             
         
             
         def points var; @@_points = var; end
             
         def winding var; @@_winding = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRegistry
     include Enhancement
     attr_accessor :_o
   end

   class EFXRegistry < FXRegistry
     
     
     def initialize(appKey=(defined?(@@_appKey)?@@_appKey:nil) || "", vendorKey=(defined?(@@_vendorKey)?@@_vendorKey:nil) || "")
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRegistry, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app_key var; @@_appKey = var; end
             
         def vendor_key var; @@_vendorKey = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXReplaceDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXReplaceDialog < FXReplaceDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXReplaceDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def ic var; @@_ic = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRootWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXRootWindow < FXRootWindow
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), vis=(defined?(@@_vis)?@@_vis:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRootWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def vis var; @@_vis = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRuler
     include Enhancement
     attr_accessor :_o
   end

   class EFXRuler < FXRuler
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || RULER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRuler, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXRulerView
     include Enhancement
     attr_accessor :_o
   end

   class EFXRulerView < FXRulerView
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXRulerView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class NotifyHeader
     include Enhancement
     attr_accessor :_o
   end

   class ENotifyHeader < NotifyHeader
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: ENotifyHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class SCNotification
     include Enhancement
     attr_accessor :_o
   end

   class ESCNotification < SCNotification
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: ESCNotification, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class TextRange
     include Enhancement
     attr_accessor :_o
   end

   class ETextRange < TextRange
     
     
     def initialize(start=(defined?(@@_start)?@@_start:nil), last=(defined?(@@_last)?@@_last:nil), size=(defined?(@@_size)?@@_size:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: ETextRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def start var; @@_start = var; end
             
         def last var; @@_last = var; end
             
         def size var; @@_size = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScintilla
     include Enhancement
     attr_accessor :_o
   end

   class EFXScintilla < FXScintilla
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScintilla, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScrollArea
     include Enhancement
     attr_accessor :_o
   end

   class EFXScrollArea < FXScrollArea
     
     
     def initialize(parent=(defined?(@@_parent)?@@_parent:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScrollArea, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def parent var; @@_parent = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScrollBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXScrollBar < FXScrollBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || SCROLLBAR_VERTICAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScrollBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScrollCorner
     include Enhancement
     attr_accessor :_o
   end

   class EFXScrollCorner < FXScrollCorner
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScrollCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScrollPane
     include Enhancement
     attr_accessor :_o
   end

   class EFXScrollPane < FXScrollPane
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), nvis=(defined?(@@_nvis)?@@_nvis:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScrollPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def nvis var; @@_nvis = var; end
             
         def opts var; @@_opts = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXScrollWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXScrollWindow < FXScrollWindow
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXScrollWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSearchDialog
     include Enhancement
     attr_accessor :_o
   end

   class EFXSearchDialog < FXSearchDialog
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), caption=(defined?(@@_caption)?@@_caption:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSearchDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def caption var; @@_caption = var; end
             
         def ic var; @@_ic = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSeparator
     include Enhancement
     attr_accessor :_o
   end

   class EFXSeparator < FXSeparator
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SEPARATOR_GROOVE|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXHorizontalSeparator
     include Enhancement
     attr_accessor :_o
   end

   class EFXHorizontalSeparator < FXHorizontalSeparator
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SEPARATOR_GROOVE|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 1, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 1, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXHorizontalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVerticalSeparator
     include Enhancement
     attr_accessor :_o
   end

   class EFXVerticalSeparator < FXVerticalSeparator
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SEPARATOR_GROOVE|LAYOUT_FILL_Y, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 1, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVerticalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSettings
     include Enhancement
     attr_accessor :_o
   end

   class EFXSettings < FXSettings
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSettings, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXShell
     include Enhancement
     attr_accessor :_o
   end

   class EFXShell < FXShell
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXShutterItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXShutterItem < FXShutterItem
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil) || "", icon=(defined?(@@_icon)?@@_icon:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXShutterItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXShutter
     include Enhancement
     attr_accessor :_o
   end

   class EFXShutter < FXShutter
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXShutter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSize
     include Enhancement
     attr_accessor :_o
   end

   class EFXSize < FXSize
     
     
     def initialize(s=(defined?(@@_s)?@@_s:nil))
       super
     end
     
     def initialize(ww=(defined?(@@_ww)?@@_ww:nil), hh=(defined?(@@_hh)?@@_hh:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSize, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def s var; @@_s = var; end
             
         
             
         def ww var; @@_ww = var; end
             
         def hh var; @@_hh = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSlider
     include Enhancement
     attr_accessor :_o
   end

   class EFXSlider < FXSlider
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || SLIDER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 0, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 0, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 0, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSphered
     include Enhancement
     attr_accessor :_o
   end

   class EFXSphered < FXSphered
     
     
     def initialize(otherSphere=(defined?(@@_otherSphere)?@@_otherSphere:nil))
       super
     end
     
     def initialize(cen=(defined?(@@_cen)?@@_cen:nil), rad=(defined?(@@_rad)?@@_rad:nil) || 0.0)
       super
     end
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), z=(defined?(@@_z)?@@_z:nil), rad=(defined?(@@_rad)?@@_rad:nil) || 0.0)
       super
     end
     
     def initialize(bounds=(defined?(@@_bounds)?@@_bounds:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSphered, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def other_sphere var; @@_otherSphere = var; end
             
         
             
         def cen var; @@_cen = var; end
             
         def rad var; @@_rad = var; end
             
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def z var; @@_z = var; end
             
         def rad var; @@_rad = var; end
             
         
             
         def bounds var; @@_bounds = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSpheref
     include Enhancement
     attr_accessor :_o
   end

   class EFXSpheref < FXSpheref
     
     
     def initialize(otherSphere=(defined?(@@_otherSphere)?@@_otherSphere:nil))
       super
     end
     
     def initialize(cen=(defined?(@@_cen)?@@_cen:nil), rad=(defined?(@@_rad)?@@_rad:nil) || 0.0)
       super
     end
     
     def initialize(x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), z=(defined?(@@_z)?@@_z:nil), rad=(defined?(@@_rad)?@@_rad:nil) || 0.0)
       super
     end
     
     def initialize(bounds=(defined?(@@_bounds)?@@_bounds:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSpheref, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def other_sphere var; @@_otherSphere = var; end
             
         
             
         def cen var; @@_cen = var; end
             
         def rad var; @@_rad = var; end
             
         
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def z var; @@_z = var; end
             
         def rad var; @@_rad = var; end
             
         
             
         def bounds var; @@_bounds = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSpinner
     include Enhancement
     attr_accessor :_o
   end

   class EFXSpinner < FXSpinner
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), cols=(defined?(@@_cols)?@@_cols:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || SPIN_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def cols var; @@_cols = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSplashWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXSplashWindow < FXSplashWindow
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), icon=(defined?(@@_icon)?@@_icon:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SPLASH_SIMPLE, ms=(defined?(@@_ms)?@@_ms:nil) || 5000)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSplashWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def icon var; @@_icon = var; end
             
         def opts var; @@_opts = var; end
             
         def ms var; @@_ms = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSplitter
     include Enhancement
     attr_accessor :_o
   end

   class EFXSplitter < FXSplitter
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SPLITTER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), tgt=(defined?(@@_tgt)?@@_tgt:nil), sel=(defined?(@@_sel)?@@_sel:nil), opts=(defined?(@@_opts)?@@_opts:nil) || SPLITTER_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSplitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         
             
         def p var; @@_p = var; end
             
         def tgt var; @@_tgt = var; end
             
         def sel var; @@_sel = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSpring
     include Enhancement
     attr_accessor :_o
   end

   class EFXSpring < FXSpring
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, relw=(defined?(@@_relw)?@@_relw:nil) || 0, relh=(defined?(@@_relh)?@@_relh:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSpring, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def relw var; @@_relw = var; end
             
         def relh var; @@_relh = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXStatusBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXStatusBar < FXStatusBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 4, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXStatusBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXStatusLine
     include Enhancement
     attr_accessor :_o
   end

   class EFXStatusLine < FXStatusLine
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXStatusLine, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXStream
     include Enhancement
     attr_accessor :_o
   end

   class EFXStream < FXStream
     
     
     def initialize(cont=(defined?(@@_cont)?@@_cont:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def cont var; @@_cont = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXStringDict
     include Enhancement
     attr_accessor :_o
   end

   class EFXStringDict < FXStringDict
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXStringDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXSwitcher
     include Enhancement
     attr_accessor :_o
   end

   class EFXSwitcher < FXSwitcher
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXSwitcher, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTGAIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXTGAIcon < FXTGAIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTGAIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTGAImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXTGAImage < FXTGAImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTGAImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTIFIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXTIFIcon < FXTIFIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTIFImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXTIFImage < FXTIFImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTabBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXTabBar < FXTabBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TABBOOK_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTabBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTabBook
     include Enhancement
     attr_accessor :_o
   end

   class EFXTabBook < FXTabBook
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TABBOOK_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTabBook, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTabItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXTabItem < FXTabItem
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text=(defined?(@@_text)?@@_text:nil), ic=(defined?(@@_ic)?@@_ic:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || TAB_TOP_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTabItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text var; @@_text = var; end
             
         def ic var; @@_ic = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTablePos
     include Enhancement
     attr_accessor :_o
   end

   class EFXTablePos < FXTablePos
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTablePos, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTableRange
     include Enhancement
     attr_accessor :_o
   end

   class EFXTableRange < FXTableRange
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTableRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTableItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXTableItem < FXTableItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), icon=(defined?(@@_icon)?@@_icon:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTableItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def icon var; @@_icon = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTable
     include Enhancement
     attr_accessor :_o
   end

   class EFXTable < FXTable
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_MARGIN, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_MARGIN, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_MARGIN, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_MARGIN)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXHiliteStyle
     include Enhancement
     attr_accessor :_o
   end

   class EFXHiliteStyle < FXHiliteStyle
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXHiliteStyle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTextChange
     include Enhancement
     attr_accessor :_o
   end

   class EFXTextChange < FXTextChange
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTextChange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXText
     include Enhancement
     attr_accessor :_o
   end

   class EFXText < FXText
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXText, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTextField
     include Enhancement
     attr_accessor :_o
   end

   class EFXTextField < FXTextField
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), ncols=(defined?(@@_ncols)?@@_ncols:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TEXTFIELD_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTextField, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def ncols var; @@_ncols = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToggleButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXToggleButton < FXToggleButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text1=(defined?(@@_text1)?@@_text1:nil), text2=(defined?(@@_text2)?@@_text2:nil), icon1=(defined?(@@_icon1)?@@_icon1:nil) || nil, icon2=(defined?(@@_icon2)?@@_icon2:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TOGGLEBUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToggleButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text1 var; @@_text1 = var; end
             
         def text2 var; @@_text2 = var; end
             
         def icon1 var; @@_icon1 = var; end
             
         def icon2 var; @@_icon2 = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToolBar
     include Enhancement
     attr_accessor :_o
   end

   class EFXToolBar < FXToolBar
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), q=(defined?(@@_q)?@@_q:nil), opts=(defined?(@@_opts)?@@_opts:nil) || LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 3, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 3, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 2, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 2, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToolBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def q var; @@_q = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToolBarGrip
     include Enhancement
     attr_accessor :_o
   end

   class EFXToolBarGrip < FXToolBarGrip
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TOOLBARGRIP_SINGLE, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToolBarGrip, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToolBarShell
     include Enhancement
     attr_accessor :_o
   end

   class EFXToolBarShell < FXToolBarShell
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED|FRAME_THICK, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 4, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 4)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToolBarShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToolBarTab
     include Enhancement
     attr_accessor :_o
   end

   class EFXToolBarTab < FXToolBarTab
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_RAISED, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToolBarTab, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXToolTip
     include Enhancement
     attr_accessor :_o
   end

   class EFXToolTip < FXToolTip
     
     
     def initialize(app=(defined?(@@_app)?@@_app:nil), opts=(defined?(@@_opts)?@@_opts:nil) || TOOLTIP_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXToolTip, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def app var; @@_app = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTopWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXTopWindow < FXTopWindow
     
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTopWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTranslator
     include Enhancement
     attr_accessor :_o
   end

   class EFXTranslator < FXTranslator
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTranslator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTreeItem
     include Enhancement
     attr_accessor :_o
   end

   class EFXTreeItem < FXTreeItem
     
     
     def initialize(text=(defined?(@@_text)?@@_text:nil), openIcon=(defined?(@@_openIcon)?@@_openIcon:nil) || nil, closedIcon=(defined?(@@_closedIcon)?@@_closedIcon:nil) || nil, data=(defined?(@@_data)?@@_data:nil) || nil)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTreeItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def text var; @@_text = var; end
             
         def open_icon var; @@_openIcon = var; end
             
         def closed_icon var; @@_closedIcon = var; end
             
         def data var; @@_data = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTreeList
     include Enhancement
     attr_accessor :_o
   end

   class EFXTreeList < FXTreeList
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TREELIST_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTreeList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTreeListBox
     include Enhancement
     attr_accessor :_o
   end

   class EFXTreeListBox < FXTreeListBox
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTreeListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXTriStateButton
     include Enhancement
     attr_accessor :_o
   end

   class EFXTriStateButton < FXTriStateButton
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), text1=(defined?(@@_text1)?@@_text1:nil), text2=(defined?(@@_text2)?@@_text2:nil), text3=(defined?(@@_text3)?@@_text3:nil), icon1=(defined?(@@_icon1)?@@_icon1:nil) || nil, icon2=(defined?(@@_icon2)?@@_icon2:nil) || nil, icon3=(defined?(@@_icon3)?@@_icon3:nil) || nil, target=(defined?(@@_target)?@@_target:nil) || nil, selector=(defined?(@@_selector)?@@_selector:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || TOGGLEBUTTON_NORMAL, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_PAD, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_PAD, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_PAD, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_PAD)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXTriStateButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def text1 var; @@_text1 = var; end
             
         def text2 var; @@_text2 = var; end
             
         def text3 var; @@_text3 = var; end
             
         def icon1 var; @@_icon1 = var; end
             
         def icon2 var; @@_icon2 = var; end
             
         def icon3 var; @@_icon3 = var; end
             
         def target var; @@_target = var; end
             
         def selector var; @@_selector = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec2d
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec2d < FXVec2d
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil) || 0.0, yy=(defined?(@@_yy)?@@_yy:nil) || 0.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec2d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec2f
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec2f < FXVec2f
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil) || 0.0, yy=(defined?(@@_yy)?@@_yy:nil) || 0.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec2f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec3d
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec3d < FXVec3d
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil), yy=(defined?(@@_yy)?@@_yy:nil), zz=(defined?(@@_zz)?@@_zz:nil) || 1.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec3d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
         def zz var; @@_zz = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec3f
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec3f < FXVec3f
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil), yy=(defined?(@@_yy)?@@_yy:nil), zz=(defined?(@@_zz)?@@_zz:nil) || 1.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec3f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
         def zz var; @@_zz = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec4d
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec4d < FXVec4d
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil), yy=(defined?(@@_yy)?@@_yy:nil), zz=(defined?(@@_zz)?@@_zz:nil), ww=(defined?(@@_ww)?@@_ww:nil) || 1.0)
       super
     end
     
     def initialize(vec3d=(defined?(@@_vec3d)?@@_vec3d:nil), ww=(defined?(@@_ww)?@@_ww:nil) || 1.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec4d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
         def zz var; @@_zz = var; end
             
         def ww var; @@_ww = var; end
             
         
             
         def vec3d var; @@_vec3d = var; end
             
         def ww var; @@_ww = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVec4f
     include Enhancement
     attr_accessor :_o
   end

   class EFXVec4f < FXVec4f
     
     
     def initialize(xx=(defined?(@@_xx)?@@_xx:nil), yy=(defined?(@@_yy)?@@_yy:nil), zz=(defined?(@@_zz)?@@_zz:nil), ww=(defined?(@@_ww)?@@_ww:nil) || 1.0)
       super
     end
     
     def initialize(vec3f=(defined?(@@_vec3f)?@@_vec3f:nil), ww=(defined?(@@_ww)?@@_ww:nil) || 1.0)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVec4f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def xx var; @@_xx = var; end
             
         def yy var; @@_yy = var; end
             
         def zz var; @@_zz = var; end
             
         def ww var; @@_ww = var; end
             
         
             
         def vec3f var; @@_vec3f = var; end
             
         def ww var; @@_ww = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVerticalFrame
     include Enhancement
     attr_accessor :_o
   end

   class EFXVerticalFrame < FXVerticalFrame
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || DEFAULT_SPACING, padRight=(defined?(@@_padRight)?@@_padRight:nil) || DEFAULT_SPACING, padTop=(defined?(@@_padTop)?@@_padTop:nil) || DEFAULT_SPACING, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || DEFAULT_SPACING, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || DEFAULT_SPACING, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || DEFAULT_SPACING)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVerticalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXVisual
     include Enhancement
     attr_accessor :_o
   end

   class EFXVisual < FXVisual
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), flgs=(defined?(@@_flgs)?@@_flgs:nil), d=(defined?(@@_d)?@@_d:nil) || 32)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def flgs var; @@_flgs = var; end
             
         def d var; @@_d = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXWindow
     include Enhancement
     attr_accessor :_o
   end

   class EFXWindow < FXWindow
     
     
     def initialize(p=(defined?(@@_p)?@@_p:nil), opts=(defined?(@@_opts)?@@_opts:nil) || 0, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0)
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), vis=(defined?(@@_vis)?@@_vis:nil))
       super
     end
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), own=(defined?(@@_own)?@@_own:nil), opts=(defined?(@@_opts)?@@_opts:nil), x=(defined?(@@_x)?@@_x:nil), y=(defined?(@@_y)?@@_y:nil), w=(defined?(@@_w)?@@_w:nil), h=(defined?(@@_h)?@@_h:nil))
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def p var; @@_p = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         
             
         def a var; @@_a = var; end
             
         def vis var; @@_vis = var; end
             
         
             
         def a var; @@_a = var; end
             
         def own var; @@_own = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def w var; @@_w = var; end
             
         def h var; @@_h = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXWizard
     include Enhancement
     attr_accessor :_o
   end

   class EFXWizard < FXWizard
     
     
     def initialize(owner=(defined?(@@_owner)?@@_owner:nil), name=(defined?(@@_name)?@@_name:nil), image=(defined?(@@_image)?@@_image:nil), opts=(defined?(@@_opts)?@@_opts:nil) || DECOR_TITLE|DECOR_BORDER|DECOR_RESIZE, x=(defined?(@@_x)?@@_x:nil) || 0, y=(defined?(@@_y)?@@_y:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 0, height=(defined?(@@_height)?@@_height:nil) || 0, padLeft=(defined?(@@_padLeft)?@@_padLeft:nil) || 10, padRight=(defined?(@@_padRight)?@@_padRight:nil) || 10, padTop=(defined?(@@_padTop)?@@_padTop:nil) || 10, padBottom=(defined?(@@_padBottom)?@@_padBottom:nil) || 10, hSpacing=(defined?(@@_hSpacing)?@@_hSpacing:nil) || 10, vSpacing=(defined?(@@_vSpacing)?@@_vSpacing:nil) || 10)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXWizard, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def owner var; @@_owner = var; end
             
         def name var; @@_name = var; end
             
         def image var; @@_image = var; end
             
         def opts var; @@_opts = var; end
             
         def x var; @@_x = var; end
             
         def y var; @@_y = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
         def pad_left var; @@_padLeft = var; end
             
         def pad_right var; @@_padRight = var; end
             
         def pad_top var; @@_padTop = var; end
             
         def pad_bottom var; @@_padBottom = var; end
             
         def h_spacing var; @@_hSpacing = var; end
             
         def v_spacing var; @@_vSpacing = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXXBMIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXXBMIcon < FXXBMIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil) || nil, mask=(defined?(@@_mask)?@@_mask:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXXBMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pixels var; @@_pixels = var; end
             
         def mask var; @@_mask = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXXBMImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXXBMImage < FXXBMImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pixels=(defined?(@@_pixels)?@@_pixels:nil) || nil, mask=(defined?(@@_mask)?@@_mask:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXXBMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pixels var; @@_pixels = var; end
             
         def mask var; @@_mask = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXXPMIcon
     include Enhancement
     attr_accessor :_o
   end

   class EFXXPMIcon < FXXPMIcon
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, clr=(defined?(@@_clr)?@@_clr:nil) || 0, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXXPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def clr var; @@_clr = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

   class FXXPMImage
     include Enhancement
     attr_accessor :_o
   end

   class EFXXPMImage < FXXPMImage
     
     
     def initialize(a=(defined?(@@_a)?@@_a:nil), pix=(defined?(@@_pix)?@@_pix:nil) || nil, opts=(defined?(@@_opts)?@@_opts:nil) || 0, width=(defined?(@@_width)?@@_width:nil) || 1, height=(defined?(@@_height)?@@_height:nil) || 1)
       super
     end
     

     def self.compose tag=nil, parenttag=:app, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: EFXXPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[tag] = os unless tag.nil?
         Enhancement.components[parenttag].kinder << os
         
         
             
         def a var; @@_a = var; end
             
         def pix var; @@_pix = var; end
             
         def opts var; @@_opts = var; end
             
         def width var; @@_width = var; end
             
         def height var; @@_height = var; end
             
              
         self.instance_eval &block
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
     end
   end
          

  module Enhancement
    module Mapper
    
       def fx4_splitter name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FX4Splitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => FOURSPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => FOURSPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def tgt var; @os.op[@os.ii].tgt = var; end
             
             def sel var; @os.op[@os.ii].sel = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FX4Splitter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx7_segment name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FX7Segment, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :opts => SEVENSEGMENT_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FX7Segment.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_accel_table name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXAccelTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXAccelTable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_event name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXEvent, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXEvent.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_app name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXApp, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:appName => "Application", :vendorName => "FoxDefault"})
             
             def app_name var; @os.op[@os.ii].appName = var; end
             
             def vendor_name var; @os.op[@os.ii].vendorName = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXApp.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_arrow_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXArrowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => ARROW_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXArrowButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxbmp_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBMPIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => Fox.FXRGB(192,192,192), :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXBMPIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxbmp_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBMPImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXBMPImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_bitmap name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmap, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :pixels => nil, :opts => 0, :width => 1, :height => 1})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXBitmap.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_bitmap_frame name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmapFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :bmp => :required, :opts => FRAME_SUNKEN|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def bmp var; @os.op[@os.ii].bmp = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXBitmapFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_bitmap_view name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmapView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :bmp => nil, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def bmp var; @os.op[@os.ii].bmp = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXBitmapView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :target => nil, :selector => 0, :opts => BUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxcur_cursor name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCURCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :pixels => :required})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXCURCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_canvas name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXCanvas.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_check_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCheckButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :target => nil, :selector => 0, :opts => CHECKBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXCheckButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_choice_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXChoiceBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :text => :required, :icon => :required, :choices => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def choices var; @os.op[@os.ii].choices = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXChoiceBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :title => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def title var; @os.op[@os.ii].title = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :clr => :required, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorItem.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => LIST_BROWSESELECT, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_ring name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorRing, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorRing.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_selector name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_well name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorWell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :color => 0, :target => nil, :selector => 0, :opts => COLORWELL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def color var; @os.op[@os.ii].color = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorWell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_color_wheel name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorWheel, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXColorWheel.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_combo_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXComboBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => COMBOBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def cols var; @os.op[@os.ii].cols = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXComboBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_composite name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXComposite, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXComposite.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_cursor name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :curid => CURSOR_ARROW})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def curid var; @os.op[@os.ii].curid = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:a => :required, :pix => :required, :width => 32, :height => 32, :hotX => -1, :hotY => -1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def hot_x var; @os.op[@os.ii].hotX = var; end
             
             def hot_y var; @os.op[@os.ii].hotY = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:a => :required, :pixels => :required, :width => 32, :height => 32, :hotX => -1, :hotY => -1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def hot_x var; @os.op[@os.ii].hotX = var; end
             
             def hot_y var; @os.op[@os.ii].hotY = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_segment name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSegment, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSegment.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_arc name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXArc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXArc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxdc name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDC, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDC.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxps_bounds name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPSBounds, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPSBounds.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_printer name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPrinter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPrinter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxdc_print name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDCPrint, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDCPrint.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxdc_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDCWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:drawable => :required, :event => nil})
             
             def drawable var; @os.op[@os.ii].drawable = var; end
             
             def event var; @os.op[@os.ii].event = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDCWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_data_target name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDataTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:value => nil, :target => nil, :selector => 0})
             
             def value var; @os.op[@os.ii].value = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDataTarget.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_debug_target name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDebugTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDebugTarget.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_delegator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDelegator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:delegate => nil})
             
             def delegate var; @os.op[@os.ii].delegate = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDelegator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dial name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDial, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => DIAL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDial.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dialog_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDialogBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :title => :required, :opts => DECOR_TITLE|DECOR_BORDER, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 10, :padRight => 10, :padTop => 10, :padBottom => 10, :hSpacing => 4, :vSpacing => 4})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def title var; @os.op[@os.ii].title = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDialogBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dict name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dir_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDirBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dir_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 500, :height => 300})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDirDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dir_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :oi => nil, :ci => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def oi var; @os.op[@os.ii].oi = var; end
             
             def ci var; @os.op[@os.ii].ci = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDirItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dir_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDirList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dir_selector name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDirSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dock_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def q var; @os.op[@os.ii].q = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDockBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dock_handler name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockHandler, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => :required, :x => :required, :y => :required, :w => :required, :h => :required, :pl => :required, :pr => :required, :pt => :required, :pb => :required})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def tgt var; @os.op[@os.ii].tgt = var; end
             
             def sel var; @os.op[@os.ii].sel = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def w var; @os.op[@os.ii].w = var; end
             
             def h var; @os.op[@os.ii].h = var; end
             
             def pl var; @os.op[@os.ii].pl = var; end
             
             def pr var; @os.op[@os.ii].pr = var; end
             
             def pt var; @os.op[@os.ii].pt = var; end
             
             def pb var; @os.op[@os.ii].pb = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDockHandler.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dock_site name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockSite, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0, :hSpacing => 0, :vSpacing => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDockSite.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_dock_title name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL|JUSTIFY_CENTER_X|JUSTIFY_CENTER_Y, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDockTitle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_document name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDocument, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDocument.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_drag_corner name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDragCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDragCorner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_drawable name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDrawable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDrawable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_drive_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDriveBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXDriveBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_extentd name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXExtentd, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:ext => :required})
             
             def ext var; @os.op[@os.ii].ext = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:lo => :required, :hi => :required})
             
             def lo var; @os.op[@os.ii].lo = var; end
             
             def hi var; @os.op[@os.ii].hi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:xlo => :required, :xhi => :required, :ylo => :required, :yhi => :required})
             
             def xlo var; @os.op[@os.ii].xlo = var; end
             
             def xhi var; @os.op[@os.ii].xhi = var; end
             
             def ylo var; @os.op[@os.ii].ylo = var; end
             
             def yhi var; @os.op[@os.ii].yhi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXExtentd.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_extentf name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXExtentf, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:ext => :required})
             
             def ext var; @os.op[@os.ii].ext = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:lo => :required, :hi => :required})
             
             def lo var; @os.op[@os.ii].lo = var; end
             
             def hi var; @os.op[@os.ii].hi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:xlo => :required, :xhi => :required, :ylo => :required, :yhi => :required})
             
             def xlo var; @os.op[@os.ii].xlo = var; end
             
             def xhi var; @os.op[@os.ii].xhi = var; end
             
             def ylo var; @os.op[@os.ii].ylo = var; end
             
             def yhi var; @os.op[@os.ii].yhi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXExtentf.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 500, :height => 300})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_assoc name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileAssoc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileAssoc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_dict name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :db => nil})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def db var; @os.op[@os.ii].db = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :bi => nil, :mi => nil, :ptr => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def bi var; @os.op[@os.ii].bi = var; end
             
             def mi var; @os.op[@os.ii].mi = var; end
             
             def ptr var; @os.op[@os.ii].ptr = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_selector name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_file_stream name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:cont => nil})
             
             def cont var; @os.op[@os.ii].cont = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFileStream.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_folding_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFoldingItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :openIcon => nil, :closedIcon => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def open_icon var; @os.op[@os.ii].openIcon = var; end
             
             def closed_icon var; @os.op[@os.ii].closedIcon = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFoldingItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_folding_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFoldingList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TREELIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFoldingList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_font_desc name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontDesc, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFontDesc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_font name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFont, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :fontDesc => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def font_desc var; @os.op[@os.ii].fontDesc = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:a => :required, :face => :required, :size => :required, :weight => FXFont::Normal, :slant => Font::Straight, :encoding => FONTENCODING_DEFAULT, :setWidth => FXFont::NonExpanded, :hints => 0})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def face var; @os.op[@os.ii].face = var; end
             
             def size var; @os.op[@os.ii].size = var; end
             
             def weight var; @os.op[@os.ii].weight = var; end
             
             def slant var; @os.op[@os.ii].slant = var; end
             
             def encoding var; @os.op[@os.ii].encoding = var; end
             
             def set_width var; @os.op[@os.ii].setWidth = var; end
             
             def hints var; @os.op[@os.ii].hints = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:a => :required, :string => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def string var; @os.op[@os.ii].string = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFont.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_font_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 600, :height => 380})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFontDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_font_selector name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFontSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_frame name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgif_cursor name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => :required, :hx => -1, :hy => -1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def hx var; @os.op[@os.ii].hx = var; end
             
             def hy var; @os.op[@os.ii].hy = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGIFCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgif_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGIFIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgif_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGIFImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_canvas name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :vis => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:parent => :required, :vis => :required, :sharegroup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def sharegroup var; @os.op[@os.ii].sharegroup = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLCanvas.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_context name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLContext, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :visual => :required, :other => nil})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def visual var; @os.op[@os.ii].visual = var; end
             
             def other var; @os.op[@os.ii].other = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLContext.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_object name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLObject.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_shape name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLShape, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :opts => :required, :front => nil, :back => nil})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def z var; @os.op[@os.ii].z = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def front var; @os.op[@os.ii].front = var; end
             
             def back var; @os.op[@os.ii].back = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLShape.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_viewport name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXViewport, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXViewport.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_light name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXLight, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXLight.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_material name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMaterial, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMaterial.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_viewer name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLViewer, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :vis => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :vis => :required, :sharegroup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def sharegroup var; @os.op[@os.ii].sharegroup = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLViewer.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxgl_visual name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :flags => :required})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def flags var; @os.op[@os.ii].flags = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGLVisual.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_gradient name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGradient, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGradient.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_gradient_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGradientBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGradientBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_group_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGroupBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :opts => GROUPBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXGroupBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_header_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHeaderItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :ic => nil, :s => 0, :ptr => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def s var; @os.op[@os.ii].s = var; end
             
             def ptr var; @os.op[@os.ii].ptr = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXHeaderItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_header name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => HEADER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXHeader.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_horizontal_frame name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHorizontalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXHorizontalFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxico_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXICOIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXICOIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxico_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXICOImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXICOImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_icon_dict name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXIconDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_icon_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :bigIcon => nil, :miniIcon => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def big_icon var; @os.op[@os.ii].bigIcon = var; end
             
             def mini_icon var; @os.op[@os.ii].miniIcon = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXIconItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_icon_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => ICONLIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXIconList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_icon_source name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconSource, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXIconSource.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_id name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXId, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXId.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_image_frame name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImageFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :img => :required, :opts => FRAME_SUNKEN|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def img var; @os.op[@os.ii].img = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXImageFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_image_view name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImageView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :img => nil, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def img var; @os.op[@os.ii].img = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXImageView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_input_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXInputDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :label => :required, :icon => nil, :opts => INPUTDIALOG_STRING, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def label var; @os.op[@os.ii].label = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXInputDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxjpg_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXJPGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1, :quality => 75})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def quality var; @os.op[@os.ii].quality = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXJPGIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxjpg_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXJPGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1, :quality => 75})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def quality var; @os.op[@os.ii].quality = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXJPGImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_knob name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXKnob, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => KNOB_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXKnob.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_label name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXLabel, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :opts => LABEL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXLabel.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_list_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXListItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :icon => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXListItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => LIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_list_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXListBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_delete_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIDeleteButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIDeleteButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_restore_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIRestoreButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIRestoreButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_maximize_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMaximizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIMaximizeButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_minimize_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMinimizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIMinimizeButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_window_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIWindowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :pup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def pup var; @os.op[@os.ii].pup = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIWindowButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_menu name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :target => nil})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIMenu.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_child name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIChild, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :name => :required, :ic => nil, :pup => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def pup var; @os.op[@os.ii].pup = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIChild.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxmdi_client name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIClient, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMDIClient.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_main_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMainWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :title => :required, :icon => nil, :miniIcon => nil, :opts => DECOR_ALL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0, :hSpacing => 4, :vSpacing => 4})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def title var; @os.op[@os.ii].title = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def mini_icon var; @os.op[@os.ii].miniIcon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMainWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_matrix name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMatrix, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :n => 1, :opts => MATRIX_BY_ROWS, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def n var; @os.op[@os.ii].n = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMatrix.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_memory_buffer name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMemoryBuffer, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:data => :required})
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMemoryBuffer.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_memory_stream name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMemoryStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:cont => nil})
             
             def cont var; @os.op[@os.ii].cont = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMemoryStream.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_bar name = nil, ii: 1, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def q var; @os.op[@os.ii].q = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :opts => :required, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT|MENUBUTTON_DOWN, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def popup_menu var; @os.op[@os.ii].popupMenu = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_caption name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCaption, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :opts => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuCaption.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_cascade name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCascade, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def popup_menu var; @os.op[@os.ii].popupMenu = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuCascade.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_check name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCheck, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuCheck.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_command name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCommand, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuCommand.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_pane name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :opts => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuPane.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_radio name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuRadio, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuRadio.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_separator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_menu_title name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def popup_menu var; @os.op[@os.ii].popupMenu = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMenuTitle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_message_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMessageBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :text => :required, :ic => nil, :opts => 0, :x => 0, :y => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXMessageBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_object name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXObject.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_option name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXOption, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXOption.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_option_menu name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXOptionMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :pup => nil, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def pup var; @os.op[@os.ii].pup = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXOptionMenu.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxpcx_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPCXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPCXIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxpcx_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPCXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPCXImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxpng_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPNGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPNGIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxpng_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPNGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPNGImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxppm_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPPMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxppm_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPPMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_packer name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPacker, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPacker.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_picker name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPicker, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => BUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPicker.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_popup name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPopup, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :opts => POPUP_VERTICAL|FRAME_RAISED|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPopup.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_print_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPrintDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXPrintDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_progress_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXProgressBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => PROGRESSBAR_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXProgressBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_progress_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXProgressDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :label => :required, :opts => PROGRESSDIALOG_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def label var; @os.op[@os.ii].label = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXProgressDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_quatd name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXQuatd, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:axis => :required, :phi => 0.0})
             
             def axis var; @os.op[@os.ii].axis = var; end
             
             def phi var; @os.op[@os.ii].phi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :w => :required})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def z var; @os.op[@os.ii].z = var; end
             
             def w var; @os.op[@os.ii].w = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:floats => :required})
             
             def floats var; @os.op[@os.ii].floats = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[3] = OpenStruct.new({:roll => :required, :pitch => :required, :yaw => :required})
             
             def roll var; @os.op[@os.ii].roll = var; end
             
             def pitch var; @os.op[@os.ii].pitch = var; end
             
             def yaw var; @os.op[@os.ii].yaw = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[4] = OpenStruct.new({:ex => :required, :ey => :required, :ez => :required})
             
             def ex var; @os.op[@os.ii].ex = var; end
             
             def ey var; @os.op[@os.ii].ey = var; end
             
             def ez var; @os.op[@os.ii].ez = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXQuatd.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_quatf name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXQuatf, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:axis => :required, :phi => 0.0})
             
             def axis var; @os.op[@os.ii].axis = var; end
             
             def phi var; @os.op[@os.ii].phi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:roll => :required, :pitch => :required, :yaw => :required})
             
             def roll var; @os.op[@os.ii].roll = var; end
             
             def pitch var; @os.op[@os.ii].pitch = var; end
             
             def yaw var; @os.op[@os.ii].yaw = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:ex => :required, :ey => :required, :ez => :required})
             
             def ex var; @os.op[@os.ii].ex = var; end
             
             def ey var; @os.op[@os.ii].ey = var; end
             
             def ez var; @os.op[@os.ii].ez = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[3] = OpenStruct.new({:mat => :required})
             
             def mat var; @os.op[@os.ii].mat = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[4] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :w => :required})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def z var; @os.op[@os.ii].z = var; end
             
             def w var; @os.op[@os.ii].w = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXQuatf.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxrgb_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRGBIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRGBIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxrgb_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRGBImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRGBImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_radio_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRadioButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :target => nil, :selector => 0, :opts => RADIOBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRadioButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_ranged name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRanged, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xlo => 0.0, :xhi => 0.0, :ylo => 0.0, :yhi => 0.0, :zlo => 0.0, :zhi => 0.0})
             
             def xlo var; @os.op[@os.ii].xlo = var; end
             
             def xhi var; @os.op[@os.ii].xhi = var; end
             
             def ylo var; @os.op[@os.ii].ylo = var; end
             
             def yhi var; @os.op[@os.ii].yhi = var; end
             
             def zlo var; @os.op[@os.ii].zlo = var; end
             
             def zhi var; @os.op[@os.ii].zhi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:bounds => :required})
             
             def bounds var; @os.op[@os.ii].bounds = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:sphere => :required})
             
             def sphere var; @os.op[@os.ii].sphere = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRanged.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_rangef name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRangef, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xlo => 0.0, :xhi => 0.0, :ylo => 0.0, :yhi => 0.0, :zlo => 0.0, :zhi => 0.0})
             
             def xlo var; @os.op[@os.ii].xlo = var; end
             
             def xhi var; @os.op[@os.ii].xhi = var; end
             
             def ylo var; @os.op[@os.ii].ylo = var; end
             
             def yhi var; @os.op[@os.ii].yhi = var; end
             
             def zlo var; @os.op[@os.ii].zlo = var; end
             
             def zhi var; @os.op[@os.ii].zhi = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:bounds => :required})
             
             def bounds var; @os.op[@os.ii].bounds = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:sphere => :required})
             
             def sphere var; @os.op[@os.ii].sphere = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRangef.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_real_slider name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRealSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => REALSLIDER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRealSlider.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_real_spinner name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRealSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => REALSPIN_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def cols var; @os.op[@os.ii].cols = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRealSpinner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_recent_files name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRecentFiles, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:a => :required, :gp => :required, :target => nil, :selector => 0})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def gp var; @os.op[@os.ii].gp = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRecentFiles.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_rectangle name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRectangle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :ww => :required, :hh => :required})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def hh var; @os.op[@os.ii].hh = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :s => :required})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def s var; @os.op[@os.ii].s = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:topleft => :required, :bottomright => :required})
             
             def topleft var; @os.op[@os.ii].topleft = var; end
             
             def bottomright var; @os.op[@os.ii].bottomright = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRectangle.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_region name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRegion, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:r => :required})
             
             def r var; @os.op[@os.ii].r = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:rect => :required})
             
             def rect var; @os.op[@os.ii].rect = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :w => :required, :h => :required})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def w var; @os.op[@os.ii].w = var; end
             
             def h var; @os.op[@os.ii].h = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[3] = OpenStruct.new({:points => :required, :winding => false})
             
             def points var; @os.op[@os.ii].points = var; end
             
             def winding var; @os.op[@os.ii].winding = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRegion.new(*(os.op[os.ii].to_h.values)) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_registry name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRegistry, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:appKey => "", :vendorKey => ""})
             
             def app_key var; @os.op[@os.ii].appKey = var; end
             
             def vendor_key var; @os.op[@os.ii].vendorKey = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRegistry.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_replace_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXReplaceDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :ic => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXReplaceDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_root_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRootWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :vis => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRootWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_ruler name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRuler, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => RULER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRuler.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_ruler_view name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRulerView, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXRulerView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def notify_header name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: NotifyHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ NotifyHeader.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def sc_notification name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: SCNotification, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ SCNotification.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def text_range name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: TextRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:start => :required, :last => :required, :size => :required})
             
             def start var; @os.op[@os.ii].start = var; end
             
             def last var; @os.op[@os.ii].last = var; end
             
             def size var; @os.op[@os.ii].size = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ TextRange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scintilla name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScintilla, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScintilla.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scroll_area name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollArea, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def parent var; @os.op[@os.ii].parent = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScrollArea.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scroll_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => SCROLLBAR_VERTICAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScrollBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scroll_corner name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScrollCorner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scroll_pane name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :nvis => :required, :opts => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def nvis var; @os.op[@os.ii].nvis = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScrollPane.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_scroll_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXScrollWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_search_dialog name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSearchDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :ic => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def caption var; @os.op[@os.ii].caption = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSearchDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_separator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_horizontal_separator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHorizontalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 1, :padRight => 1, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXHorizontalSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vertical_separator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVerticalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_Y, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 1, :padBottom => 1})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVerticalSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_settings name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSettings, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSettings.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_shell name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXShell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_shutter_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShutterItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => "", :icon => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXShutterItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_shutter name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShutter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXShutter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_size name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSize, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:s => :required})
             
             def s var; @os.op[@os.ii].s = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:ww => :required, :hh => :required})
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def hh var; @os.op[@os.ii].hh = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSize.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_slider name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => SLIDER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSlider.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_sphered name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSphered, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:otherSphere => :required})
             
             def other_sphere var; @os.op[@os.ii].otherSphere = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:cen => :required, :rad => 0.0})
             
             def cen var; @os.op[@os.ii].cen = var; end
             
             def rad var; @os.op[@os.ii].rad = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :rad => 0.0})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def z var; @os.op[@os.ii].z = var; end
             
             def rad var; @os.op[@os.ii].rad = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[3] = OpenStruct.new({:bounds => :required})
             
             def bounds var; @os.op[@os.ii].bounds = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSphered.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_spheref name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpheref, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:otherSphere => :required})
             
             def other_sphere var; @os.op[@os.ii].otherSphere = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:cen => :required, :rad => 0.0})
             
             def cen var; @os.op[@os.ii].cen = var; end
             
             def rad var; @os.op[@os.ii].rad = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :rad => 0.0})
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def z var; @os.op[@os.ii].z = var; end
             
             def rad var; @os.op[@os.ii].rad = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[3] = OpenStruct.new({:bounds => :required})
             
             def bounds var; @os.op[@os.ii].bounds = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSpheref.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_spinner name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => SPIN_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def cols var; @os.op[@os.ii].cols = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSpinner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_splash_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSplashWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :icon => :required, :opts => SPLASH_SIMPLE, :ms => 5000})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def ms var; @os.op[@os.ii].ms = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSplashWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_splitter name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSplitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => SPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => SPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def tgt var; @os.op[@os.ii].tgt = var; end
             
             def sel var; @os.op[@os.ii].sel = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSplitter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_spring name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpring, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :relw => 0, :relh => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def relw var; @os.op[@os.ii].relw = var; end
             
             def relh var; @os.op[@os.ii].relh = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSpring.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_status_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStatusBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => 4, :vSpacing => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXStatusBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_status_line name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStatusLine, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXStatusLine.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_stream name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:cont => nil})
             
             def cont var; @os.op[@os.ii].cont = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXStream.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_string_dict name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStringDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXStringDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_switcher name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSwitcher, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXSwitcher.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxtga_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTGAIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTGAIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxtga_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTGAImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTGAImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxtif_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTIFIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxtif_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTIFImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tab_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TABBOOK_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTabBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tab_book name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabBook, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TABBOOK_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTabBook.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tab_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :opts => TAB_TOP_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text var; @os.op[@os.ii].text = var; end
             
             def ic var; @os.op[@os.ii].ic = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTabItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_table_pos name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTablePos, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTablePos.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_table_range name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTableRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTableRange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_table_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTableItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :icon => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def icon var; @os.op[@os.ii].icon = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTableItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_table name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_MARGIN, :padRight => DEFAULT_MARGIN, :padTop => DEFAULT_MARGIN, :padBottom => DEFAULT_MARGIN})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_hilite_style name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHiliteStyle, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXHiliteStyle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_text_change name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTextChange, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTextChange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_text name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXText, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXText.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_text_field name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTextField, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :ncols => :required, :target => nil, :selector => 0, :opts => TEXTFIELD_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def ncols var; @os.op[@os.ii].ncols = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTextField.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_toggle_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToggleButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text1 => :required, :text2 => :required, :icon1 => nil, :icon2 => nil, :target => nil, :selector => 0, :opts => TOGGLEBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text1 var; @os.op[@os.ii].text1 = var; end
             
             def text2 var; @os.op[@os.ii].text2 = var; end
             
             def icon1 var; @os.op[@os.ii].icon1 = var; end
             
             def icon2 var; @os.op[@os.ii].icon2 = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToggleButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tool_bar name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def q var; @os.op[@os.ii].q = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:p => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToolBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tool_bar_grip name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarGrip, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TOOLBARGRIP_SINGLE, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToolBarGrip.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tool_bar_shell name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :opts => FRAME_RAISED|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :hSpacing => 4, :vSpacing => 4})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToolBarShell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tool_bar_tab name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarTab, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToolBarTab.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tool_tip name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolTip, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:app => :required, :opts => TOOLTIP_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def app var; @os.op[@os.ii].app = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXToolTip.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_top_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTopWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTopWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_translator name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTranslator, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTranslator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tree_item name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:text => :required, :openIcon => nil, :closedIcon => nil, :data => nil})
             
             def text var; @os.op[@os.ii].text = var; end
             
             def open_icon var; @os.op[@os.ii].openIcon = var; end
             
             def closed_icon var; @os.op[@os.ii].closedIcon = var; end
             
             def data var; @os.op[@os.ii].data = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTreeItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tree_list name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeList, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TREELIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTreeList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tree_list_box name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTreeListBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_tri_state_button name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTriStateButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :text1 => :required, :text2 => :required, :text3 => :required, :icon1 => nil, :icon2 => nil, :icon3 => nil, :target => nil, :selector => 0, :opts => TOGGLEBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def text1 var; @os.op[@os.ii].text1 = var; end
             
             def text2 var; @os.op[@os.ii].text2 = var; end
             
             def text3 var; @os.op[@os.ii].text3 = var; end
             
             def icon1 var; @os.op[@os.ii].icon1 = var; end
             
             def icon2 var; @os.op[@os.ii].icon2 = var; end
             
             def icon3 var; @os.op[@os.ii].icon3 = var; end
             
             def target var; @os.op[@os.ii].target = var; end
             
             def selector var; @os.op[@os.ii].selector = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXTriStateButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec2d name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec2d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => 0.0, :yy => 0.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec2d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec2f name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec2f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => 0.0, :yy => 0.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec2f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec3d name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec3d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => 1.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def zz var; @os.op[@os.ii].zz = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec3d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec3f name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec3f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => 1.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def zz var; @os.op[@os.ii].zz = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec3f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec4d name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec4d, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => :required, :ww => 1.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def zz var; @os.op[@os.ii].zz = var; end
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:vec3d => :required, :ww => 1.0})
             
             def vec3d var; @os.op[@os.ii].vec3d = var; end
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec4d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vec4f name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec4f, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => :required, :ww => 1.0})
             
             def xx var; @os.op[@os.ii].xx = var; end
             
             def yy var; @os.op[@os.ii].yy = var; end
             
             def zz var; @os.op[@os.ii].zz = var; end
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:vec3f => :required, :ww => 1.0})
             
             def vec3f var; @os.op[@os.ii].vec3f = var; end
             
             def ww var; @os.op[@os.ii].ww = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVec4f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_vertical_frame name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVerticalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVerticalFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_visual name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :flgs => :required, :d => 32})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def flgs var; @os.op[@os.ii].flgs = var; end
             
             def d var; @os.op[@os.ii].d = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXVisual.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_window name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
             
             def p var; @os.op[@os.ii].p = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[1] = OpenStruct.new({:a => :required, :vis => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def vis var; @os.op[@os.ii].vis = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
         
             @os.op[2] = OpenStruct.new({:a => :required, :own => :required, :opts => :required, :x => :required, :y => :required, :w => :required, :h => :required})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def own var; @os.op[@os.ii].own = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def w var; @os.op[@os.ii].w = var; end
             
             def h var; @os.op[@os.ii].h = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fx_wizard name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXWizard, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :image => :required, :opts => DECOR_TITLE|DECOR_BORDER|DECOR_RESIZE, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 10, :padRight => 10, :padTop => 10, :padBottom => 10, :hSpacing => 10, :vSpacing => 10})
             
             def owner var; @os.op[@os.ii].owner = var; end
             
             def name var; @os.op[@os.ii].name = var; end
             
             def image var; @os.op[@os.ii].image = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def x var; @os.op[@os.ii].x = var; end
             
             def y var; @os.op[@os.ii].y = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def pad_left var; @os.op[@os.ii].padLeft = var; end
             
             def pad_right var; @os.op[@os.ii].padRight = var; end
             
             def pad_top var; @os.op[@os.ii].padTop = var; end
             
             def pad_bottom var; @os.op[@os.ii].padBottom = var; end
             
             def h_spacing var; @os.op[@os.ii].hSpacing = var; end
             
             def v_spacing var; @os.op[@os.ii].vSpacing = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXWizard.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxxbm_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXBMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :mask => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def mask var; @os.op[@os.ii].mask = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXXBMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxxbm_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXBMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :mask => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pixels var; @os.op[@os.ii].pixels = var; end
             
             def mask var; @os.op[@os.ii].mask = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXXBMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxxpm_icon name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def clr var; @os.op[@os.ii].clr = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXXPMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
       def fxxpm_image name = nil, ii: 0, pos: Enhancement.stack.last, &block
         Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil, instance_result: nil))
         Enhancement.components[name] = os unless name.nil?
         unless pos.nil?
           pos.kinder << os 
         else
           Enhancement.base = os
         end
         
         
             @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
             
             def a var; @os.op[@os.ii].a = var; end
             
             def pix var; @os.op[@os.ii].pix = var; end
             
             def opts var; @os.op[@os.ii].opts = var; end
             
             def width var; @os.op[@os.ii].width = var; end
             
             def height var; @os.op[@os.ii].height = var; end
             
             def instance a=nil, &block
                @os.instance_name = a
                @os.instance_block = block
             end
              
         self.instance_eval &block
         
         os.fx = ->(){ FXXPMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
         
         Enhancement.stack.pop                                                  
         @os = Enhancement.stack.last
         os
       end
    
    end
    
    # 
    def sel_none(&block)
      self.connect(SEL_NONE, &block)
    end
    
    # Key pressed
    def sel_keypress(&block)
      self.connect(SEL_KEYPRESS, &block)
    end
    
    # Key released
    def sel_keyrelease(&block)
      self.connect(SEL_KEYRELEASE, &block)
    end
    
    # Left mouse button pressed
    def sel_leftbuttonpress(&block)
      self.connect(SEL_LEFTBUTTONPRESS, &block)
    end
    
    # Left mouse button released
    def sel_leftbuttonrelease(&block)
      self.connect(SEL_LEFTBUTTONRELEASE, &block)
    end
    
    # Middle mouse button pressed
    def sel_middlebuttonpress(&block)
      self.connect(SEL_MIDDLEBUTTONPRESS, &block)
    end
    
    # Middle mouse button released
    def sel_middlebuttonrelease(&block)
      self.connect(SEL_MIDDLEBUTTONRELEASE, &block)
    end
    
    # Right mouse button pressed
    def sel_rightbuttonpress(&block)
      self.connect(SEL_RIGHTBUTTONPRESS, &block)
    end
    
    # Right mouse button released
    def sel_rightbuttonrelease(&block)
      self.connect(SEL_RIGHTBUTTONRELEASE, &block)
    end
    
    # Mouse motion
    def sel_motion(&block)
      self.connect(SEL_MOTION, &block)
    end
    
    # Mouse entered window
    def sel_enter(&block)
      self.connect(SEL_ENTER, &block)
    end
    
    # Mouse left window
    def sel_leave(&block)
      self.connect(SEL_LEAVE, &block)
    end
    
    # Focus into window
    def sel_focusin(&block)
      self.connect(SEL_FOCUSIN, &block)
    end
    
    # Focus out of window
    def sel_focusout(&block)
      self.connect(SEL_FOCUSOUT, &block)
    end
    
    # 
    def sel_keymap(&block)
      self.connect(SEL_KEYMAP, &block)
    end
    
    # Lost the grab (Windows)
    def sel_ungrabbed(&block)
      self.connect(SEL_UNGRABBED, &block)
    end
    
    # Must repaint window
    def sel_paint(&block)
      self.connect(SEL_PAINT, &block)
    end
    
    # 
    def sel_create(&block)
      self.connect(SEL_CREATE, &block)
    end
    
    # 
    def sel_destroy(&block)
      self.connect(SEL_DESTROY, &block)
    end
    
    # Window was hidden
    def sel_unmap(&block)
      self.connect(SEL_UNMAP, &block)
    end
    
    # Window was shown
    def sel_map(&block)
      self.connect(SEL_MAP, &block)
    end
    
    # Resize
    def sel_configure(&block)
      self.connect(SEL_CONFIGURE, &block)
    end
    
    # Widget lost selection
    def sel_selection_lost(&block)
      self.connect(SEL_SELECTION_LOST, &block)
    end
    
    # Widget gained selection
    def sel_selection_gained(&block)
      self.connect(SEL_SELECTION_GAINED, &block)
    end
    
    # Inquire selection data
    def sel_selection_request(&block)
      self.connect(SEL_SELECTION_REQUEST, &block)
    end
    
    # Window to top of stack
    def sel_raised(&block)
      self.connect(SEL_RAISED, &block)
    end
    
    # Window to bottom of stack
    def sel_lowered(&block)
      self.connect(SEL_LOWERED, &block)
    end
    
    # Close window
    def sel_close(&block)
      self.connect(SEL_CLOSE, &block)
    end
    
    # Delete window
    def sel_delete(&block)
      self.connect(SEL_DELETE, &block)
    end
    
    # Iconified
    def sel_minimize(&block)
      self.connect(SEL_MINIMIZE, &block)
    end
    
    # No longer iconified or maximized
    def sel_restore(&block)
      self.connect(SEL_RESTORE, &block)
    end
    
    # Maximized
    def sel_maximize(&block)
      self.connect(SEL_MAXIMIZE, &block)
    end
    
    # GUI update
    def sel_update(&block)
      self.connect(SEL_UPDATE, &block)
    end
    
    # GUI command
    def sel_command(&block)
      self.connect(SEL_COMMAND, &block)
    end
    
    # Clicked
    def sel_clicked(&block)
      self.connect(SEL_CLICKED, &block)
    end
    
    # Double-clicked
    def sel_doubleclicked(&block)
      self.connect(SEL_DOUBLECLICKED, &block)
    end
    
    # Triple-clicked
    def sel_tripleclicked(&block)
      self.connect(SEL_TRIPLECLICKED, &block)
    end
    
    # Mouse wheel
    def sel_mousewheel(&block)
      self.connect(SEL_MOUSEWHEEL, &block)
    end
    
    # GUI has changed
    def sel_changed(&block)
      self.connect(SEL_CHANGED, &block)
    end
    
    # Verify change
    def sel_verify(&block)
      self.connect(SEL_VERIFY, &block)
    end
    
    # Deselected
    def sel_deselected(&block)
      self.connect(SEL_DESELECTED, &block)
    end
    
    # Selected
    def sel_selected(&block)
      self.connect(SEL_SELECTED, &block)
    end
    
    # Inserted
    def sel_inserted(&block)
      self.connect(SEL_INSERTED, &block)
    end
    
    # Replaced
    def sel_replaced(&block)
      self.connect(SEL_REPLACED, &block)
    end
    
    # Deleted
    def sel_deleted(&block)
      self.connect(SEL_DELETED, &block)
    end
    
    # Opened
    def sel_opened(&block)
      self.connect(SEL_OPENED, &block)
    end
    
    # Closed
    def sel_closed(&block)
      self.connect(SEL_CLOSED, &block)
    end
    
    # Expanded
    def sel_expanded(&block)
      self.connect(SEL_EXPANDED, &block)
    end
    
    # Collapsed
    def sel_collapsed(&block)
      self.connect(SEL_COLLAPSED, &block)
    end
    
    # Start a drag
    def sel_begindrag(&block)
      self.connect(SEL_BEGINDRAG, &block)
    end
    
    # End a drag
    def sel_enddrag(&block)
      self.connect(SEL_ENDDRAG, &block)
    end
    
    # Dragged
    def sel_dragged(&block)
      self.connect(SEL_DRAGGED, &block)
    end
    
    # Lassoed
    def sel_lassoed(&block)
      self.connect(SEL_LASSOED, &block)
    end
    
    # Timeout occurred
    def sel_timeout(&block)
      self.connect(SEL_TIMEOUT, &block)
    end
    
    # Signal received
    def sel_signal(&block)
      self.connect(SEL_SIGNAL, &block)
    end
    
    # Widget lost clipboard
    def sel_clipboard_lost(&block)
      self.connect(SEL_CLIPBOARD_LOST, &block)
    end
    
    # Widget gained clipboard
    def sel_clipboard_gained(&block)
      self.connect(SEL_CLIPBOARD_GAINED, &block)
    end
    
    # Inquire clipboard data
    def sel_clipboard_request(&block)
      self.connect(SEL_CLIPBOARD_REQUEST, &block)
    end
    
    # Background chore
    def sel_chore(&block)
      self.connect(SEL_CHORE, &block)
    end
    
    # Focus on widget itself
    def sel_focus_self(&block)
      self.connect(SEL_FOCUS_SELF, &block)
    end
    
    # Focus moved right
    def sel_focus_right(&block)
      self.connect(SEL_FOCUS_RIGHT, &block)
    end
    
    # Focus moved left
    def sel_focus_left(&block)
      self.connect(SEL_FOCUS_LEFT, &block)
    end
    
    # Focus moved down
    def sel_focus_down(&block)
      self.connect(SEL_FOCUS_DOWN, &block)
    end
    
    # Focus moved up
    def sel_focus_up(&block)
      self.connect(SEL_FOCUS_UP, &block)
    end
    
    # Focus moved to next widget
    def sel_focus_next(&block)
      self.connect(SEL_FOCUS_NEXT, &block)
    end
    
    # Focus moved to previous widget
    def sel_focus_prev(&block)
      self.connect(SEL_FOCUS_PREV, &block)
    end
    
    # Drag action entering potential drop target
    def sel_dnd_enter(&block)
      self.connect(SEL_DND_ENTER, &block)
    end
    
    # Drag action leaving potential drop target
    def sel_dnd_leave(&block)
      self.connect(SEL_DND_LEAVE, &block)
    end
    
    # Drop on drop target
    def sel_dnd_drop(&block)
      self.connect(SEL_DND_DROP, &block)
    end
    
    # Drag position changed over potential drop target
    def sel_dnd_motion(&block)
      self.connect(SEL_DND_MOTION, &block)
    end
    
    # Inquire drag and drop data
    def sel_dnd_request(&block)
      self.connect(SEL_DND_REQUEST, &block)
    end
    
    # Read activity on a pipe
    def sel_io_read(&block)
      self.connect(SEL_IO_READ, &block)
    end
    
    # Write activity on a pipe
    def sel_io_write(&block)
      self.connect(SEL_IO_WRITE, &block)
    end
    
    # Except activity on a pipe
    def sel_io_except(&block)
      self.connect(SEL_IO_EXCEPT, &block)
    end
    
    # Picked some location
    def sel_picked(&block)
      self.connect(SEL_PICKED, &block)
    end
    
    # Message inquiring about tooltip
    def sel_query_tip(&block)
      self.connect(SEL_QUERY_TIP, &block)
    end
    
    # Message inquiring about statusline help
    def sel_query_help(&block)
      self.connect(SEL_QUERY_HELP, &block)
    end
    
    # Toolbar docked
    def sel_docked(&block)
      self.connect(SEL_DOCKED, &block)
    end
    
    # Toolbar floated
    def sel_floated(&block)
      self.connect(SEL_FLOATED, &block)
    end
    
    # Session is about to close
    def sel_session_notify(&block)
      self.connect(SEL_SESSION_NOTIFY, &block)
    end
    
    # Session is closed
    def sel_session_closed(&block)
      self.connect(SEL_SESSION_CLOSED, &block)
    end
                                                            
  end                                                      
end
