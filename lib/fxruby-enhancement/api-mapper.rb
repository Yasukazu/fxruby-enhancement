# coding: utf-8
=begin rdoc

NOTE WELL:
  This file is generated by fxruby-enhancement.
  Do NOT modify this file. Modify the template
  file instead!!!!
=end

module Fox
  module Enhancement
    module Mapper
      class << self
        def fox_classes
          Fox.constants.select { |k|
            Fox.const_get(k).instance_of? Class
          }
        end

        def fox_initialize_parms
          fox_classes.map { |klass|
            [klass, Fox.const_get(klass)
                .instance_method(:initialize)
                .parameters
                .map{ |typ, nam|
               unless typ == :rest
                 [typ, nam]
               else
                 [:rest,
                  parm_hints(klass).map{ |parm| [:req, parm] }
                 ]
               end
             }
            ]
          }
        end
         
        HINTS = {
        }
        
        def parm_hints klass
          HINTS[klass]
        end        
      end
    end
  end

# Here we include enhancements to all FXRuby classes

   class FX4Splitter
     include Enhancement
     attr_accessor :_o     
   end
   def fx4_splitter name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"FOURSPLITTER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = FOURSPLITTER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :tgt=>nil, :sel=>nil, :opts=>"FOURSPLITTER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].tgt = :required
           def tgt var
             @op[@ii].tgt = var
           end
         
           @op[1].sel = :required
           def sel var
             @op[@ii].sel = var
           end
         
           @op[1].opts = FOURSPLITTER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FX4Splitter.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FX7Segment
     include Enhancement
     attr_accessor :_o     
   end
   def fx7_segment name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :opts=>"SEVENSEGMENT_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].opts = SEVENSEGMENT_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FX7Segment.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXAccelTable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_accel_table name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXAccelTable.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXEvent
     include Enhancement
     attr_accessor :_o     
   end
   def fx_event name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXEvent.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXApp
     include Enhancement
     attr_accessor :_o     
   end
   def fx_app name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:appName=>"\"Application\"", :vendorName=>"\"FoxDefault\""}
         
           @op[0].appName = "Application"
           def app_name var
             @op[@ii].appName = var
           end
         
           @op[0].vendorName = "FoxDefault"
           def vendor_name var
             @op[@ii].vendorName = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXApp.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXArrowButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_arrow_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :target=>"nil", :selector=>"0", :opts=>"ARROW_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = ARROW_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXArrowButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXBMPIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxbmp_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"Fox.FXRGB(192,192,192)", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = Fox.FXRGB(192,192,192)
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXBMPIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXBMPImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxbmp_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXBMPImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXBitmap
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :pixels=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].pixels = nil
           def pixels var
             @op[@ii].pixels = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXBitmap.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXBitmapFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap_frame name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :bmp=>nil, :opts=>"FRAME_SUNKEN|FRAME_THICK", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].bmp = :required
           def bmp var
             @op[@ii].bmp = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXBitmapFrame.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXBitmapView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap_view name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :bmp=>"nil", :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].bmp = nil
           def bmp var
             @op[@ii].bmp = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXBitmapView.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :target=>"nil", :selector=>"0", :opts=>"BUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = BUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXCURCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fxcur_cursor name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :pixels=>nil}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].pixels = :required
           def pixels var
             @op[@ii].pixels = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXCURCursor.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXCanvas
     include Enhancement
     attr_accessor :_o     
   end
   def fx_canvas name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXCanvas.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXCheckButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_check_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :target=>"nil", :selector=>"0", :opts=>"CHECKBUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = CHECKBUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXCheckButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXChoiceBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_choice_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :text=>nil, :icon=>nil, :choices=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = :required
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].choices = :required
           def choices var
             @op[@ii].choices = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXChoiceBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :title=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].title = :required
           def title var
             @op[@ii].title = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :clr=>nil, :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].clr = :required
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"LIST_BROWSESELECT", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = LIST_BROWSESELECT
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorRing
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_ring name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorRing.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_selector name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorSelector.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorWell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_well name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :color=>"0", :target=>"nil", :selector=>"0", :opts=>"COLORWELL_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].color = 0
           def color var
             @op[@ii].color = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = COLORWELL_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorWell.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXColorWheel
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_wheel name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXColorWheel.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXComboBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_combo_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :cols=>nil, :target=>"nil", :selector=>"0", :opts=>"COMBOBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].cols = :required
           def cols var
             @op[@ii].cols = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = COMBOBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXComboBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXComposite
     include Enhancement
     attr_accessor :_o     
   end
   def fx_composite name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXComposite.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fx_cursor name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :curid=>"CURSOR_ARROW"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].curid = CURSOR_ARROW
           def curid var
             @op[@ii].curid = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:a=>nil, :pix=>nil, :width=>"32", :height=>"32", :hotX=>"-1", :hotY=>"-1"}
         
           @op[1].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[1].pix = :required
           def pix var
             @op[@ii].pix = var
           end
         
           @op[1].width = 32
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 32
           def height var
             @op[@ii].height = var
           end
         
           @op[1].hotX = -1
           def hot_x var
             @op[@ii].hotX = var
           end
         
           @op[1].hotY = -1
           def hot_y var
             @op[@ii].hotY = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:a=>nil, :pixels=>nil, :width=>"32", :height=>"32", :hotX=>"-1", :hotY=>"-1"}
         
           @op[2].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[2].pixels = :required
           def pixels var
             @op[@ii].pixels = var
           end
         
           @op[2].width = 32
           def width var
             @op[@ii].width = var
           end
         
           @op[2].height = 32
           def height var
             @op[@ii].height = var
           end
         
           @op[2].hotX = -1
           def hot_x var
             @op[@ii].hotX = var
           end
         
           @op[2].hotY = -1
           def hot_y var
             @op[@ii].hotY = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXCursor.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSegment
     include Enhancement
     attr_accessor :_o     
   end
   def fx_segment name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXSegment.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXArc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_arc name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXArc.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDC
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDC.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPSBounds
     include Enhancement
     attr_accessor :_o     
   end
   def fxps_bounds name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXPSBounds.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPrinter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_printer name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXPrinter.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDCPrint
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc_print name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDCPrint.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDCWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:drawable=>nil, :event=>"nil"}
         
           @op[0].drawable = :required
           def drawable var
             @op[@ii].drawable = var
           end
         
           @op[0].event = nil
           def event var
             @op[@ii].event = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDCWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDataTarget
     include Enhancement
     attr_accessor :_o     
   end
   def fx_data_target name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:value=>"nil", :target=>"nil", :selector=>"0"}
         
           @op[0].value = nil
           def value var
             @op[@ii].value = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDataTarget.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDebugTarget
     include Enhancement
     attr_accessor :_o     
   end
   def fx_debug_target name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXDebugTarget.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDelegator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_delegator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:delegate=>"nil"}
         
           @op[0].delegate = nil
           def delegate var
             @op[@ii].delegate = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDelegator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDial
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dial name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"DIAL_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = DIAL_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDial.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDialogBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dialog_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :title=>nil, :opts=>"DECOR_TITLE|DECOR_BORDER", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"10", :padRight=>"10", :padTop=>"10", :padBottom=>"10", :hSpacing=>"4", :vSpacing=>"4"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].title = :required
           def title var
             @op[@ii].title = var
           end
         
           @op[0].opts = DECOR_TITLE|DECOR_BORDER
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 10
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 10
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 10
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 10
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = 4
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 4
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDialogBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dict name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXDict.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDirBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDirBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDirDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :name=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"500", :height=>"300"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 500
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 300
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDirDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDirItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :oi=>"nil", :ci=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].oi = nil
           def oi var
             @op[@ii].oi = var
           end
         
           @op[0].ci = nil
           def ci var
             @op[@ii].ci = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDirItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDirList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDirList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDirSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_selector name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDirSelector.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDockBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :q=>nil, :opts=>"LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].q = :required
           def q var
             @op[@ii].q = var
           end
         
           @op[0].opts = LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :opts=>"LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].opts = LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[1].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[1].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[1].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[1].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[1].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[1].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDockBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDockHandler
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_handler name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :tgt=>nil, :sel=>nil, :opts=>nil, :x=>nil, :y=>nil, :w=>nil, :h=>nil, :pl=>nil, :pr=>nil, :pt=>nil, :pb=>nil}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].tgt = :required
           def tgt var
             @op[@ii].tgt = var
           end
         
           @op[0].sel = :required
           def sel var
             @op[@ii].sel = var
           end
         
           @op[0].opts = :required
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[0].w = :required
           def w var
             @op[@ii].w = var
           end
         
           @op[0].h = :required
           def h var
             @op[@ii].h = var
           end
         
           @op[0].pl = :required
           def pl var
             @op[@ii].pl = var
           end
         
           @op[0].pr = :required
           def pr var
             @op[@ii].pr = var
           end
         
           @op[0].pt = :required
           def pt var
             @op[@ii].pt = var
           end
         
           @op[0].pb = :required
           def pb var
             @op[@ii].pb = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDockHandler.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDockSite
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_site name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0", :hSpacing=>"0", :vSpacing=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = 0
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 0
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDockSite.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDockTitle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_title name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL|JUSTIFY_CENTER_X|JUSTIFY_CENTER_Y", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL|JUSTIFY_CENTER_X|JUSTIFY_CENTER_Y
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDockTitle.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDocument
     include Enhancement
     attr_accessor :_o     
   end
   def fx_document name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXDocument.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDragCorner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drag_corner name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDragCorner.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDrawable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drawable name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXDrawable.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXDriveBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drive_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXDriveBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXExtentd
     include Enhancement
     attr_accessor :_o     
   end
   def fx_extentd name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:ext=>nil}
         
           @op[0].ext = :required
           def ext var
             @op[@ii].ext = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:lo=>nil, :hi=>nil}
         
           @op[1].lo = :required
           def lo var
             @op[@ii].lo = var
           end
         
           @op[1].hi = :required
           def hi var
             @op[@ii].hi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:xlo=>nil, :xhi=>nil, :ylo=>nil, :yhi=>nil}
         
           @op[2].xlo = :required
           def xlo var
             @op[@ii].xlo = var
           end
         
           @op[2].xhi = :required
           def xhi var
             @op[@ii].xhi = var
           end
         
           @op[2].ylo = :required
           def ylo var
             @op[@ii].ylo = var
           end
         
           @op[2].yhi = :required
           def yhi var
             @op[@ii].yhi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXExtentd.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXExtentf
     include Enhancement
     attr_accessor :_o     
   end
   def fx_extentf name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:ext=>nil}
         
           @op[0].ext = :required
           def ext var
             @op[@ii].ext = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:lo=>nil, :hi=>nil}
         
           @op[1].lo = :required
           def lo var
             @op[@ii].lo = var
           end
         
           @op[1].hi = :required
           def hi var
             @op[@ii].hi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:xlo=>nil, :xhi=>nil, :ylo=>nil, :yhi=>nil}
         
           @op[2].xlo = :required
           def xlo var
             @op[@ii].xlo = var
           end
         
           @op[2].xhi = :required
           def xhi var
             @op[@ii].xhi = var
           end
         
           @op[2].ylo = :required
           def ylo var
             @op[@ii].ylo = var
           end
         
           @op[2].yhi = :required
           def yhi var
             @op[@ii].yhi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXExtentf.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :name=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"500", :height=>"300"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 500
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 300
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileAssoc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_assoc name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXFileAssoc.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_dict name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :db=>"nil"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].db = nil
           def db var
             @op[@ii].db = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileDict.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :bi=>"nil", :mi=>"nil", :ptr=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].bi = nil
           def bi var
             @op[@ii].bi = var
           end
         
           @op[0].mi = nil
           def mi var
             @op[@ii].mi = var
           end
         
           @op[0].ptr = nil
           def ptr var
             @op[@ii].ptr = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_selector name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileSelector.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFileStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_stream name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:cont=>"nil"}
         
           @op[0].cont = nil
           def cont var
             @op[@ii].cont = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFileStream.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFoldingItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_folding_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :openIcon=>"nil", :closedIcon=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].openIcon = nil
           def open_icon var
             @op[@ii].openIcon = var
           end
         
           @op[0].closedIcon = nil
           def closed_icon var
             @op[@ii].closedIcon = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFoldingItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFoldingList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_folding_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"TREELIST_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TREELIST_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFoldingList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFontDesc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_desc name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXFontDesc.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFont
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :fontDesc=>nil}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].fontDesc = :required
           def font_desc var
             @op[@ii].fontDesc = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:a=>nil, :face=>nil, :size=>nil, :weight=>"FXFont::Normal", :slant=>"Font::Straight", :encoding=>"FONTENCODING_DEFAULT", :setWidth=>"FXFont::NonExpanded", :hints=>"0"}
         
           @op[1].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[1].face = :required
           def face var
             @op[@ii].face = var
           end
         
           @op[1].size = :required
           def size var
             @op[@ii].size = var
           end
         
           @op[1].weight = FXFont::Normal
           def weight var
             @op[@ii].weight = var
           end
         
           @op[1].slant = Font::Straight
           def slant var
             @op[@ii].slant = var
           end
         
           @op[1].encoding = FONTENCODING_DEFAULT
           def encoding var
             @op[@ii].encoding = var
           end
         
           @op[1].setWidth = FXFont::NonExpanded
           def set_width var
             @op[@ii].setWidth = var
           end
         
           @op[1].hints = 0
           def hints var
             @op[@ii].hints = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:a=>nil, :string=>nil}
         
           @op[2].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[2].string = :required
           def string var
             @op[@ii].string = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFont.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFontDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :name=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"600", :height=>"380"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 600
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 380
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFontDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFontSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_selector name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFontSelector.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_frame name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXFrame.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGIFCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_cursor name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>nil, :hx=>"-1", :hy=>"-1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = :required
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].hx = -1
           def hx var
             @op[@ii].hx = var
           end
         
           @op[0].hy = -1
           def hy var
             @op[@ii].hy = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGIFCursor.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGIFIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGIFIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGIFImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGIFImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLCanvas
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_canvas name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :vis=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:parent=>nil, :vis=>nil, :sharegroup=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[1].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[1].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
           @op[1].sharegroup = :required
           def sharegroup var
             @op[@ii].sharegroup = var
           end
         
           @op[1].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[1].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[1].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGLCanvas.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLContext
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_context name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :visual=>nil, :other=>"nil"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].visual = :required
           def visual var
             @op[@ii].visual = var
           end
         
           @op[0].other = nil
           def other var
             @op[@ii].other = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGLContext.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLObject
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_object name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXGLObject.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLShape
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_shape name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:x=>nil, :y=>nil, :z=>nil, :opts=>nil, :front=>"nil", :back=>"nil"}
         
           @op[0].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[0].z = :required
           def z var
             @op[@ii].z = var
           end
         
           @op[0].opts = :required
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].front = nil
           def front var
             @op[@ii].front = var
           end
         
           @op[0].back = nil
           def back var
             @op[@ii].back = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGLShape.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXViewport
     include Enhancement
     attr_accessor :_o     
   end
   def fx_viewport name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXViewport.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXLight
     include Enhancement
     attr_accessor :_o     
   end
   def fx_light name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXLight.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMaterial
     include Enhancement
     attr_accessor :_o     
   end
   def fx_material name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXMaterial.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLViewer
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_viewer name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :vis=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :vis=>nil, :sharegroup=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
           @op[1].sharegroup = :required
           def sharegroup var
             @op[@ii].sharegroup = var
           end
         
           @op[1].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[1].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[1].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGLViewer.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGLVisual
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_visual name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :flags=>nil}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].flags = :required
           def flags var
             @op[@ii].flags = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGLVisual.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGradient
     include Enhancement
     attr_accessor :_o     
   end
   def fx_gradient name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXGradient.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGradientBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_gradient_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGradientBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXGroupBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_group_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :opts=>"GROUPBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].opts = GROUPBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXGroupBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXHeaderItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_header_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :ic=>"nil", :s=>"0", :ptr=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].s = 0
           def s var
             @op[@ii].s = var
           end
         
           @op[0].ptr = nil
           def ptr var
             @op[@ii].ptr = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXHeaderItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXHeader
     include Enhancement
     attr_accessor :_o     
   end
   def fx_header name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"HEADER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = HEADER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXHeader.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXHorizontalFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_horizontal_frame name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXHorizontalFrame.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXICOIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxico_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXICOIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXICOImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxico_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXICOImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXIconDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_dict name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXIconDict.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXIconItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :bigIcon=>"nil", :miniIcon=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].bigIcon = nil
           def big_icon var
             @op[@ii].bigIcon = var
           end
         
           @op[0].miniIcon = nil
           def mini_icon var
             @op[@ii].miniIcon = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXIconItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXIconList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"ICONLIST_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = ICONLIST_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXIconList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXIconSource
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_source name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXIconSource.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXId
     include Enhancement
     attr_accessor :_o     
   end
   def fx_id name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXId.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXImage
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pixels=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pixels = nil
           def pixels var
             @op[@ii].pixels = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXImageFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image_frame name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :img=>nil, :opts=>"FRAME_SUNKEN|FRAME_THICK", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].img = :required
           def img var
             @op[@ii].img = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXImageFrame.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXImageView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image_view name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :img=>"nil", :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].img = nil
           def img var
             @op[@ii].img = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXImageView.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXInputDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_input_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :label=>nil, :icon=>"nil", :opts=>"INPUTDIALOG_STRING", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].label = :required
           def label var
             @op[@ii].label = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].opts = INPUTDIALOG_STRING
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXInputDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXJPGIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxjpg_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1", :quality=>"75"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
           @op[0].quality = 75
           def quality var
             @op[@ii].quality = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXJPGIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXJPGImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxjpg_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1", :quality=>"75"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
           @op[0].quality = 75
           def quality var
             @op[@ii].quality = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXJPGImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXKnob
     include Enhancement
     attr_accessor :_o     
   end
   def fx_knob name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"KNOB_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = KNOB_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXKnob.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXLabel
     include Enhancement
     attr_accessor :_o     
   end
   def fx_label name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :opts=>"LABEL_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].opts = LABEL_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXLabel.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXListItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :icon=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXListItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"LIST_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = LIST_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXListBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXListBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIDeleteButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_delete_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_RAISED", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_RAISED
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIDeleteButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIRestoreButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_restore_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_RAISED", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_RAISED
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIRestoreButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIMaximizeButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_maximize_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_RAISED", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_RAISED
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIMaximizeButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIMinimizeButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_minimize_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_RAISED", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_RAISED
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIMinimizeButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIWindowButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_window_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :pup=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].pup = :required
           def pup var
             @op[@ii].pup = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIWindowButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIMenu
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_menu name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :target=>"nil"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIMenu.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIChild
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_child name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :name=>nil, :ic=>"nil", :pup=>"nil", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].pup = nil
           def pup var
             @op[@ii].pup = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIChild.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMDIClient
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_client name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMDIClient.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMainWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_main_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :title=>nil, :icon=>"nil", :miniIcon=>"nil", :opts=>"DECOR_ALL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0", :hSpacing=>"4", :vSpacing=>"4"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].title = :required
           def title var
             @op[@ii].title = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].miniIcon = nil
           def mini_icon var
             @op[@ii].miniIcon = var
           end
         
           @op[0].opts = DECOR_ALL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = 4
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 4
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMainWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMatrix
     include Enhancement
     attr_accessor :_o     
   end
   def fx_matrix name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :n=>"1", :opts=>"MATRIX_BY_ROWS", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].n = 1
           def n var
             @op[@ii].n = var
           end
         
           @op[0].opts = MATRIX_BY_ROWS
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMatrix.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMemoryBuffer
     include Enhancement
     attr_accessor :_o     
   end
   def fx_memory_buffer name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:data=>nil}
         
           @op[0].data = :required
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMemoryBuffer.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMemoryStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_memory_stream name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:cont=>"nil"}
         
           @op[0].cont = nil
           def cont var
             @op[@ii].cont = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMemoryStream.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :q=>nil, :opts=>"LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].q = :required
           def q var
             @op[@ii].q = var
           end
         
           @op[0].opts = LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :opts=>nil, :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].opts = :required
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[1].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[1].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[1].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[1].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[1].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[1].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :popupMenu=>"nil", :opts=>"JUSTIFY_NORMAL|ICON_BEFORE_TEXT|MENUBUTTON_DOWN", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].popupMenu = nil
           def popup_menu var
             @op[@ii].popupMenu = var
           end
         
           @op[0].opts = JUSTIFY_NORMAL|ICON_BEFORE_TEXT|MENUBUTTON_DOWN
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuCaption
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_caption name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :opts=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuCaption.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuCascade
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_cascade name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :popupMenu=>"nil", :opts=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].popupMenu = nil
           def popup_menu var
             @op[@ii].popupMenu = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuCascade.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuCheck
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_check name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :target=>"nil", :selector=>"0", :opts=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuCheck.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuCommand
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_command name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :ic=>"nil", :target=>"nil", :selector=>"0", :opts=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuCommand.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuPane
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_pane name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :opts=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuPane.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuRadio
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_radio name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :target=>"nil", :selector=>"0", :opts=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuRadio.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_separator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :opts=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuSeparator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMenuTitle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_title name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :icon=>"nil", :popupMenu=>"nil", :opts=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].popupMenu = nil
           def popup_menu var
             @op[@ii].popupMenu = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMenuTitle.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXMessageBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_message_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :text=>nil, :ic=>"nil", :opts=>"0", :x=>"0", :y=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXMessageBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXObject
     include Enhancement
     attr_accessor :_o     
   end
   def fx_object name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXObject.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXOption
     include Enhancement
     attr_accessor :_o     
   end
   def fx_option name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :ic=>"nil", :target=>"nil", :selector=>"0", :opts=>"JUSTIFY_NORMAL|ICON_BEFORE_TEXT", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = JUSTIFY_NORMAL|ICON_BEFORE_TEXT
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXOption.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXOptionMenu
     include Enhancement
     attr_accessor :_o     
   end
   def fx_option_menu name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :pup=>"nil", :opts=>"JUSTIFY_NORMAL|ICON_BEFORE_TEXT", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].pup = nil
           def pup var
             @op[@ii].pup = var
           end
         
           @op[0].opts = JUSTIFY_NORMAL|ICON_BEFORE_TEXT
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXOptionMenu.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPCXIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxpcx_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPCXIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPCXImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxpcx_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPCXImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPNGIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxpng_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPNGIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPNGImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxpng_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPNGImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPPMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxppm_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPPMIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPPMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxppm_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPPMImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPacker
     include Enhancement
     attr_accessor :_o     
   end
   def fx_packer name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPacker.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPicker
     include Enhancement
     attr_accessor :_o     
   end
   def fx_picker name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :ic=>"nil", :target=>"nil", :selector=>"0", :opts=>"BUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = BUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPicker.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPopup
     include Enhancement
     attr_accessor :_o     
   end
   def fx_popup name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :opts=>"POPUP_VERTICAL|FRAME_RAISED|FRAME_THICK", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].opts = POPUP_VERTICAL|FRAME_RAISED|FRAME_THICK
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPopup.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXPrintDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_print_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :name=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXPrintDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXProgressBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_progress_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"PROGRESSBAR_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = PROGRESSBAR_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXProgressBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXProgressDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_progress_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :label=>nil, :opts=>"PROGRESSDIALOG_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].label = :required
           def label var
             @op[@ii].label = var
           end
         
           @op[0].opts = PROGRESSDIALOG_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXProgressDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXQuatd
     include Enhancement
     attr_accessor :_o     
   end
   def fx_quatd name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:axis=>nil, :phi=>"0.0"}
         
           @op[0].axis = :required
           def axis var
             @op[@ii].axis = var
           end
         
           @op[0].phi = 0.0
           def phi var
             @op[@ii].phi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:x=>nil, :y=>nil, :z=>nil, :w=>nil}
         
           @op[1].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[1].z = :required
           def z var
             @op[@ii].z = var
           end
         
           @op[1].w = :required
           def w var
             @op[@ii].w = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:floats=>nil}
         
           @op[2].floats = :required
           def floats var
             @op[@ii].floats = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[3] = OpenStruct.new
         #{:roll=>nil, :pitch=>nil, :yaw=>nil}
         
           @op[3].roll = :required
           def roll var
             @op[@ii].roll = var
           end
         
           @op[3].pitch = :required
           def pitch var
             @op[@ii].pitch = var
           end
         
           @op[3].yaw = :required
           def yaw var
             @op[@ii].yaw = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[4] = OpenStruct.new
         #{:ex=>nil, :ey=>nil, :ez=>nil}
         
           @op[4].ex = :required
           def ex var
             @op[@ii].ex = var
           end
         
           @op[4].ey = :required
           def ey var
             @op[@ii].ey = var
           end
         
           @op[4].ez = :required
           def ez var
             @op[@ii].ez = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXQuatd.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXQuatf
     include Enhancement
     attr_accessor :_o     
   end
   def fx_quatf name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:axis=>nil, :phi=>"0.0"}
         
           @op[0].axis = :required
           def axis var
             @op[@ii].axis = var
           end
         
           @op[0].phi = 0.0
           def phi var
             @op[@ii].phi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:roll=>nil, :pitch=>nil, :yaw=>nil}
         
           @op[1].roll = :required
           def roll var
             @op[@ii].roll = var
           end
         
           @op[1].pitch = :required
           def pitch var
             @op[@ii].pitch = var
           end
         
           @op[1].yaw = :required
           def yaw var
             @op[@ii].yaw = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:ex=>nil, :ey=>nil, :ez=>nil}
         
           @op[2].ex = :required
           def ex var
             @op[@ii].ex = var
           end
         
           @op[2].ey = :required
           def ey var
             @op[@ii].ey = var
           end
         
           @op[2].ez = :required
           def ez var
             @op[@ii].ez = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[3] = OpenStruct.new
         #{:mat=>nil}
         
           @op[3].mat = :required
           def mat var
             @op[@ii].mat = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[4] = OpenStruct.new
         #{:x=>nil, :y=>nil, :z=>nil, :w=>nil}
         
           @op[4].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[4].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[4].z = :required
           def z var
             @op[@ii].z = var
           end
         
           @op[4].w = :required
           def w var
             @op[@ii].w = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXQuatf.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRGBIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxrgb_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRGBIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRGBImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxrgb_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRGBImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRadioButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_radio_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :text=>nil, :target=>"nil", :selector=>"0", :opts=>"RADIOBUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = RADIOBUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRadioButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRanged
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ranged name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xlo=>"0.0", :xhi=>"0.0", :ylo=>"0.0", :yhi=>"0.0", :zlo=>"0.0", :zhi=>"0.0"}
         
           @op[0].xlo = 0.0
           def xlo var
             @op[@ii].xlo = var
           end
         
           @op[0].xhi = 0.0
           def xhi var
             @op[@ii].xhi = var
           end
         
           @op[0].ylo = 0.0
           def ylo var
             @op[@ii].ylo = var
           end
         
           @op[0].yhi = 0.0
           def yhi var
             @op[@ii].yhi = var
           end
         
           @op[0].zlo = 0.0
           def zlo var
             @op[@ii].zlo = var
           end
         
           @op[0].zhi = 0.0
           def zhi var
             @op[@ii].zhi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:bounds=>nil}
         
           @op[1].bounds = :required
           def bounds var
             @op[@ii].bounds = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:sphere=>nil}
         
           @op[2].sphere = :required
           def sphere var
             @op[@ii].sphere = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRanged.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRangef
     include Enhancement
     attr_accessor :_o     
   end
   def fx_rangef name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xlo=>"0.0", :xhi=>"0.0", :ylo=>"0.0", :yhi=>"0.0", :zlo=>"0.0", :zhi=>"0.0"}
         
           @op[0].xlo = 0.0
           def xlo var
             @op[@ii].xlo = var
           end
         
           @op[0].xhi = 0.0
           def xhi var
             @op[@ii].xhi = var
           end
         
           @op[0].ylo = 0.0
           def ylo var
             @op[@ii].ylo = var
           end
         
           @op[0].yhi = 0.0
           def yhi var
             @op[@ii].yhi = var
           end
         
           @op[0].zlo = 0.0
           def zlo var
             @op[@ii].zlo = var
           end
         
           @op[0].zhi = 0.0
           def zhi var
             @op[@ii].zhi = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:bounds=>nil}
         
           @op[1].bounds = :required
           def bounds var
             @op[@ii].bounds = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:sphere=>nil}
         
           @op[2].sphere = :required
           def sphere var
             @op[@ii].sphere = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRangef.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRealSlider
     include Enhancement
     attr_accessor :_o     
   end
   def fx_real_slider name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"REALSLIDER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = REALSLIDER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRealSlider.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRealSpinner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_real_spinner name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :cols=>nil, :target=>"nil", :selector=>"0", :opts=>"REALSPIN_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].cols = :required
           def cols var
             @op[@ii].cols = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = REALSPIN_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRealSpinner.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRecentFiles
     include Enhancement
     attr_accessor :_o     
   end
   def fx_recent_files name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:a=>nil, :gp=>nil, :target=>"nil", :selector=>"0"}
         
           @op[1].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[1].gp = :required
           def gp var
             @op[@ii].gp = var
           end
         
           @op[1].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[1].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRecentFiles.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRectangle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_rectangle name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>nil, :yy=>nil, :ww=>nil, :hh=>nil}
         
           @op[0].xx = :required
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = :required
           def yy var
             @op[@ii].yy = var
           end
         
           @op[0].ww = :required
           def ww var
             @op[@ii].ww = var
           end
         
           @op[0].hh = :required
           def hh var
             @op[@ii].hh = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :s=>nil}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].s = :required
           def s var
             @op[@ii].s = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:topleft=>nil, :bottomright=>nil}
         
           @op[2].topleft = :required
           def topleft var
             @op[@ii].topleft = var
           end
         
           @op[2].bottomright = :required
           def bottomright var
             @op[@ii].bottomright = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRectangle.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRegion
     include Enhancement
     attr_accessor :_o     
   end
   def fx_region name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:r=>nil}
         
           @op[0].r = :required
           def r var
             @op[@ii].r = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:rect=>nil}
         
           @op[1].rect = :required
           def rect var
             @op[@ii].rect = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:x=>nil, :y=>nil, :w=>nil, :h=>nil}
         
           @op[2].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[2].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[2].w = :required
           def w var
             @op[@ii].w = var
           end
         
           @op[2].h = :required
           def h var
             @op[@ii].h = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[3] = OpenStruct.new
         #{:points=>nil, :winding=>"false"}
         
           @op[3].points = :required
           def points var
             @op[@ii].points = var
           end
         
           @op[3].winding = false
           def winding var
             @op[@ii].winding = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRegion.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRegistry
     include Enhancement
     attr_accessor :_o     
   end
   def fx_registry name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:appKey=>"\"\"", :vendorKey=>"\"\""}
         
           @op[0].appKey = ""
           def app_key var
             @op[@ii].appKey = var
           end
         
           @op[0].vendorKey = ""
           def vendor_key var
             @op[@ii].vendorKey = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRegistry.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXReplaceDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_replace_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :ic=>"nil", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXReplaceDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRootWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_root_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :vis=>nil}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRootWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRuler
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ruler name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"RULER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = RULER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRuler.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXRulerView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ruler_view name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXRulerView.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class NotifyHeader
     include Enhancement
     attr_accessor :_o     
   end
   def notify_header name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << NotifyHeader.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class SCNotification
     include Enhancement
     attr_accessor :_o     
   end
   def sc_notification name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << SCNotification.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class TextRange
     include Enhancement
     attr_accessor :_o     
   end
   def text_range name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:start=>nil, :last=>nil, :size=>nil}
         
           @op[0].start = :required
           def start var
             @op[@ii].start = var
           end
         
           @op[0].last = :required
           def last var
             @op[@ii].last = var
           end
         
           @op[0].size = :required
           def size var
             @op[@ii].size = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << TextRange.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScintilla
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scintilla name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScintilla.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScrollArea
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_area name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:parent=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].parent = :required
           def parent var
             @op[@ii].parent = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScrollArea.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScrollBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"SCROLLBAR_VERTICAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = SCROLLBAR_VERTICAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScrollBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScrollCorner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_corner name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScrollCorner.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScrollPane
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_pane name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :nvis=>nil, :opts=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].nvis = :required
           def nvis var
             @op[@ii].nvis = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScrollPane.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXScrollWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXScrollWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSearchDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_search_dialog name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :caption=>nil, :ic=>"nil", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].caption = :required
           def caption var
             @op[@ii].caption = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSearchDialog.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_separator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"SEPARATOR_GROOVE|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = SEPARATOR_GROOVE|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSeparator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXHorizontalSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_horizontal_separator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"SEPARATOR_GROOVE|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"1", :padRight=>"1", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = SEPARATOR_GROOVE|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 1
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 1
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXHorizontalSeparator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVerticalSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vertical_separator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"SEPARATOR_GROOVE|LAYOUT_FILL_Y", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"1", :padBottom=>"1"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = SEPARATOR_GROOVE|LAYOUT_FILL_Y
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 1
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 1
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVerticalSeparator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSettings
     include Enhancement
     attr_accessor :_o     
   end
   def fx_settings name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXSettings.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXShell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shell name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXShell.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXShutterItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shutter_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>"\"\"", :icon=>"nil", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = ""
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXShutterItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXShutter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shutter name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXShutter.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSize
     include Enhancement
     attr_accessor :_o     
   end
   def fx_size name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:s=>nil}
         
           @op[0].s = :required
           def s var
             @op[@ii].s = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:ww=>nil, :hh=>nil}
         
           @op[1].ww = :required
           def ww var
             @op[@ii].ww = var
           end
         
           @op[1].hh = :required
           def hh var
             @op[@ii].hh = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSize.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSlider
     include Enhancement
     attr_accessor :_o     
   end
   def fx_slider name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"SLIDER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"0", :padRight=>"0", :padTop=>"0", :padBottom=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = SLIDER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 0
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 0
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 0
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 0
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSlider.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSphered
     include Enhancement
     attr_accessor :_o     
   end
   def fx_sphered name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:otherSphere=>nil}
         
           @op[0].otherSphere = :required
           def other_sphere var
             @op[@ii].otherSphere = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:cen=>nil, :rad=>"0.0"}
         
           @op[1].cen = :required
           def cen var
             @op[@ii].cen = var
           end
         
           @op[1].rad = 0.0
           def rad var
             @op[@ii].rad = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:x=>nil, :y=>nil, :z=>nil, :rad=>"0.0"}
         
           @op[2].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[2].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[2].z = :required
           def z var
             @op[@ii].z = var
           end
         
           @op[2].rad = 0.0
           def rad var
             @op[@ii].rad = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[3] = OpenStruct.new
         #{:bounds=>nil}
         
           @op[3].bounds = :required
           def bounds var
             @op[@ii].bounds = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSphered.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSpheref
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spheref name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:otherSphere=>nil}
         
           @op[0].otherSphere = :required
           def other_sphere var
             @op[@ii].otherSphere = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:cen=>nil, :rad=>"0.0"}
         
           @op[1].cen = :required
           def cen var
             @op[@ii].cen = var
           end
         
           @op[1].rad = 0.0
           def rad var
             @op[@ii].rad = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:x=>nil, :y=>nil, :z=>nil, :rad=>"0.0"}
         
           @op[2].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[2].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[2].z = :required
           def z var
             @op[@ii].z = var
           end
         
           @op[2].rad = 0.0
           def rad var
             @op[@ii].rad = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[3] = OpenStruct.new
         #{:bounds=>nil}
         
           @op[3].bounds = :required
           def bounds var
             @op[@ii].bounds = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSpheref.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSpinner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spinner name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :cols=>nil, :target=>"nil", :selector=>"0", :opts=>"SPIN_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].cols = :required
           def cols var
             @op[@ii].cols = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = SPIN_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSpinner.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSplashWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_splash_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :icon=>nil, :opts=>"SPLASH_SIMPLE", :ms=>"5000"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].icon = :required
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].opts = SPLASH_SIMPLE
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].ms = 5000
           def ms var
             @op[@ii].ms = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSplashWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSplitter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_splitter name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"SPLITTER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = SPLITTER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :tgt=>nil, :sel=>nil, :opts=>"SPLITTER_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].tgt = :required
           def tgt var
             @op[@ii].tgt = var
           end
         
           @op[1].sel = :required
           def sel var
             @op[@ii].sel = var
           end
         
           @op[1].opts = SPLITTER_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSplitter.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSpring
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spring name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :relw=>"0", :relh=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].relw = 0
           def relw var
             @op[@ii].relw = var
           end
         
           @op[0].relh = 0
           def relh var
             @op[@ii].relh = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSpring.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXStatusBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_status_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"4", :vSpacing=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = 4
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 0
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXStatusBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXStatusLine
     include Enhancement
     attr_accessor :_o     
   end
   def fx_status_line name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXStatusLine.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_stream name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:cont=>"nil"}
         
           @op[0].cont = nil
           def cont var
             @op[@ii].cont = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXStream.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXStringDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_string_dict name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXStringDict.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXSwitcher
     include Enhancement
     attr_accessor :_o     
   end
   def fx_switcher name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXSwitcher.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTGAIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxtga_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTGAIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTGAImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxtga_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTGAImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTIFIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxtif_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTIFIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTIFImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxtif_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTIFImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTabBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"TABBOOK_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TABBOOK_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTabBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTabBook
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_book name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"TABBOOK_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TABBOOK_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTabBook.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTabItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text=>nil, :ic=>"nil", :opts=>"TAB_TOP_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].ic = nil
           def ic var
             @op[@ii].ic = var
           end
         
           @op[0].opts = TAB_TOP_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTabItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTablePos
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_pos name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXTablePos.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTableRange
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_range name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXTableRange.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTableItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :icon=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].icon = nil
           def icon var
             @op[@ii].icon = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTableItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_MARGIN", :padRight=>"DEFAULT_MARGIN", :padTop=>"DEFAULT_MARGIN", :padBottom=>"DEFAULT_MARGIN"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_MARGIN
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_MARGIN
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_MARGIN
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_MARGIN
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTable.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXHiliteStyle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_hilite_style name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXHiliteStyle.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTextChange
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text_change name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXTextChange.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXText
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXText.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTextField
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text_field name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :ncols=>nil, :target=>"nil", :selector=>"0", :opts=>"TEXTFIELD_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].ncols = :required
           def ncols var
             @op[@ii].ncols = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TEXTFIELD_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTextField.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToggleButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_toggle_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text1=>nil, :text2=>nil, :icon1=>"nil", :icon2=>"nil", :target=>"nil", :selector=>"0", :opts=>"TOGGLEBUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text1 = :required
           def text1 var
             @op[@ii].text1 = var
           end
         
           @op[0].text2 = :required
           def text2 var
             @op[@ii].text2 = var
           end
         
           @op[0].icon1 = nil
           def icon1 var
             @op[@ii].icon1 = var
           end
         
           @op[0].icon2 = nil
           def icon2 var
             @op[@ii].icon2 = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TOGGLEBUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToggleButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToolBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :q=>nil, :opts=>"LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].q = :required
           def q var
             @op[@ii].q = var
           end
         
           @op[0].opts = LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:p=>nil, :opts=>"LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"3", :padRight=>"3", :padTop=>"2", :padBottom=>"2", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[1].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[1].opts = LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X
           def opts var
             @op[@ii].opts = var
           end
         
           @op[1].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[1].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[1].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[1].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[1].padLeft = 3
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[1].padRight = 3
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[1].padTop = 2
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[1].padBottom = 2
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[1].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[1].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToolBar.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToolBarGrip
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_grip name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"TOOLBARGRIP_SINGLE", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TOOLBARGRIP_SINGLE
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToolBarGrip.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToolBarShell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_shell name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :opts=>"FRAME_RAISED|FRAME_THICK", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :hSpacing=>"4", :vSpacing=>"4"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].opts = FRAME_RAISED|FRAME_THICK
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].hSpacing = 4
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 4
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToolBarShell.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToolBarTab
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_tab name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_RAISED", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_RAISED
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToolBarTab.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXToolTip
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_tip name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:app=>nil, :opts=>"TOOLTIP_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].app = :required
           def app var
             @op[@ii].app = var
           end
         
           @op[0].opts = TOOLTIP_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXToolTip.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTopWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_top_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
          
     self.instance_eval &block
     Enhancement.stack << FXTopWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTranslator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_translator name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTranslator.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTreeItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_item name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:text=>nil, :openIcon=>"nil", :closedIcon=>"nil", :data=>"nil"}
         
           @op[0].text = :required
           def text var
             @op[@ii].text = var
           end
         
           @op[0].openIcon = nil
           def open_icon var
             @op[@ii].openIcon = var
           end
         
           @op[0].closedIcon = nil
           def closed_icon var
             @op[@ii].closedIcon = var
           end
         
           @op[0].data = nil
           def data var
             @op[@ii].data = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTreeItem.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTreeList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_list name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"TREELIST_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TREELIST_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTreeList.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTreeListBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_list_box name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :target=>"nil", :selector=>"0", :opts=>"FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTreeListBox.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXTriStateButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tri_state_button name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :text1=>nil, :text2=>nil, :text3=>nil, :icon1=>"nil", :icon2=>"nil", :icon3=>"nil", :target=>"nil", :selector=>"0", :opts=>"TOGGLEBUTTON_NORMAL", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_PAD", :padRight=>"DEFAULT_PAD", :padTop=>"DEFAULT_PAD", :padBottom=>"DEFAULT_PAD"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].text1 = :required
           def text1 var
             @op[@ii].text1 = var
           end
         
           @op[0].text2 = :required
           def text2 var
             @op[@ii].text2 = var
           end
         
           @op[0].text3 = :required
           def text3 var
             @op[@ii].text3 = var
           end
         
           @op[0].icon1 = nil
           def icon1 var
             @op[@ii].icon1 = var
           end
         
           @op[0].icon2 = nil
           def icon2 var
             @op[@ii].icon2 = var
           end
         
           @op[0].icon3 = nil
           def icon3 var
             @op[@ii].icon3 = var
           end
         
           @op[0].target = nil
           def target var
             @op[@ii].target = var
           end
         
           @op[0].selector = 0
           def selector var
             @op[@ii].selector = var
           end
         
           @op[0].opts = TOGGLEBUTTON_NORMAL
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_PAD
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_PAD
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_PAD
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_PAD
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXTriStateButton.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec2d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec2d name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>"0.0", :yy=>"0.0"}
         
           @op[0].xx = 0.0
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = 0.0
           def yy var
             @op[@ii].yy = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec2d.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec2f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec2f name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>"0.0", :yy=>"0.0"}
         
           @op[0].xx = 0.0
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = 0.0
           def yy var
             @op[@ii].yy = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec2f.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec3d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec3d name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>nil, :yy=>nil, :zz=>"1.0"}
         
           @op[0].xx = :required
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = :required
           def yy var
             @op[@ii].yy = var
           end
         
           @op[0].zz = 1.0
           def zz var
             @op[@ii].zz = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec3d.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec3f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec3f name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>nil, :yy=>nil, :zz=>"1.0"}
         
           @op[0].xx = :required
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = :required
           def yy var
             @op[@ii].yy = var
           end
         
           @op[0].zz = 1.0
           def zz var
             @op[@ii].zz = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec3f.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec4d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec4d name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>nil, :yy=>nil, :zz=>nil, :ww=>"1.0"}
         
           @op[0].xx = :required
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = :required
           def yy var
             @op[@ii].yy = var
           end
         
           @op[0].zz = :required
           def zz var
             @op[@ii].zz = var
           end
         
           @op[0].ww = 1.0
           def ww var
             @op[@ii].ww = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:vec3d=>nil, :ww=>"1.0"}
         
           @op[1].vec3d = :required
           def vec3d var
             @op[@ii].vec3d = var
           end
         
           @op[1].ww = 1.0
           def ww var
             @op[@ii].ww = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec4d.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVec4f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec4f name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:xx=>nil, :yy=>nil, :zz=>nil, :ww=>"1.0"}
         
           @op[0].xx = :required
           def xx var
             @op[@ii].xx = var
           end
         
           @op[0].yy = :required
           def yy var
             @op[@ii].yy = var
           end
         
           @op[0].zz = :required
           def zz var
             @op[@ii].zz = var
           end
         
           @op[0].ww = 1.0
           def ww var
             @op[@ii].ww = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:vec3f=>nil, :ww=>"1.0"}
         
           @op[1].vec3f = :required
           def vec3f var
             @op[@ii].vec3f = var
           end
         
           @op[1].ww = 1.0
           def ww var
             @op[@ii].ww = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVec4f.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVerticalFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vertical_frame name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"DEFAULT_SPACING", :padRight=>"DEFAULT_SPACING", :padTop=>"DEFAULT_SPACING", :padBottom=>"DEFAULT_SPACING", :hSpacing=>"DEFAULT_SPACING", :vSpacing=>"DEFAULT_SPACING"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = DEFAULT_SPACING
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = DEFAULT_SPACING
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = DEFAULT_SPACING
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = DEFAULT_SPACING
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = DEFAULT_SPACING
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = DEFAULT_SPACING
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVerticalFrame.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXVisual
     include Enhancement
     attr_accessor :_o     
   end
   def fx_visual name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :flgs=>nil, :d=>"32"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].flgs = :required
           def flgs var
             @op[@ii].flgs = var
           end
         
           @op[0].d = 32
           def d var
             @op[@ii].d = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXVisual.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_window name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:p=>nil, :opts=>"0", :x=>"0", :y=>"0", :width=>"0", :height=>"0"}
         
           @op[0].p = :required
           def p var
             @op[@ii].p = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[1] = OpenStruct.new
         #{:a=>nil, :vis=>nil}
         
           @op[1].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[1].vis = :required
           def vis var
             @op[@ii].vis = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
     
         @op[2] = OpenStruct.new
         #{:a=>nil, :own=>nil, :opts=>nil, :x=>nil, :y=>nil, :w=>nil, :h=>nil}
         
           @op[2].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[2].own = :required
           def own var
             @op[@ii].own = var
           end
         
           @op[2].opts = :required
           def opts var
             @op[@ii].opts = var
           end
         
           @op[2].x = :required
           def x var
             @op[@ii].x = var
           end
         
           @op[2].y = :required
           def y var
             @op[@ii].y = var
           end
         
           @op[2].w = :required
           def w var
             @op[@ii].w = var
           end
         
           @op[2].h = :required
           def h var
             @op[@ii].h = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXWindow.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXWizard
     include Enhancement
     attr_accessor :_o     
   end
   def fx_wizard name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:owner=>nil, :name=>nil, :image=>nil, :opts=>"DECOR_TITLE|DECOR_BORDER|DECOR_RESIZE", :x=>"0", :y=>"0", :width=>"0", :height=>"0", :padLeft=>"10", :padRight=>"10", :padTop=>"10", :padBottom=>"10", :hSpacing=>"10", :vSpacing=>"10"}
         
           @op[0].owner = :required
           def owner var
             @op[@ii].owner = var
           end
         
           @op[0].name = :required
           def name var
             @op[@ii].name = var
           end
         
           @op[0].image = :required
           def image var
             @op[@ii].image = var
           end
         
           @op[0].opts = DECOR_TITLE|DECOR_BORDER|DECOR_RESIZE
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].x = 0
           def x var
             @op[@ii].x = var
           end
         
           @op[0].y = 0
           def y var
             @op[@ii].y = var
           end
         
           @op[0].width = 0
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 0
           def height var
             @op[@ii].height = var
           end
         
           @op[0].padLeft = 10
           def pad_left var
             @op[@ii].padLeft = var
           end
         
           @op[0].padRight = 10
           def pad_right var
             @op[@ii].padRight = var
           end
         
           @op[0].padTop = 10
           def pad_top var
             @op[@ii].padTop = var
           end
         
           @op[0].padBottom = 10
           def pad_bottom var
             @op[@ii].padBottom = var
           end
         
           @op[0].hSpacing = 10
           def h_spacing var
             @op[@ii].hSpacing = var
           end
         
           @op[0].vSpacing = 10
           def v_spacing var
             @op[@ii].vSpacing = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXWizard.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXXBMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxxbm_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pixels=>"nil", :mask=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pixels = nil
           def pixels var
             @op[@ii].pixels = var
           end
         
           @op[0].mask = nil
           def mask var
             @op[@ii].mask = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXXBMIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXXBMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxxbm_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pixels=>"nil", :mask=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pixels = nil
           def pixels var
             @op[@ii].pixels = var
           end
         
           @op[0].mask = nil
           def mask var
             @op[@ii].mask = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXXBMImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXXPMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxxpm_icon name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :clr=>"0", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].clr = 0
           def clr var
             @op[@ii].clr = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXXPMIcon.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

   class FXXPMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxxpm_image name = nil, ii: 0, &block
     @op = []
     @ii = ii
     
     
         @op[0] = OpenStruct.new
         #{:a=>nil, :pix=>"nil", :opts=>"0", :width=>"1", :height=>"1"}
         
           @op[0].a = :required
           def a var
             @op[@ii].a = var
           end
         
           @op[0].pix = nil
           def pix var
             @op[@ii].pix = var
           end
         
           @op[0].opts = 0
           def opts var
             @op[@ii].opts = var
           end
         
           @op[0].width = 1
           def width var
             @op[@ii].width = var
           end
         
           @op[0].height = 1
           def height var
             @op[@ii].height = var
           end
         
         def instance a=nil, &block
            @op[@ii].instance_name = a
            @op[@ii].instance_block = block
         end
          
     self.instance_eval &block
     Enhancement.stack << FXXPMImage.new(*([Enhancement.stack.last] + @op[@ii].to_h.values[1..-1]))
     Enhancement.stack.pop
   end

end 
