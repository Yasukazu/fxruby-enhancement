# coding: utf-8
=begin rdoc

NOTE WELL:
  This file is generated by fxruby-enhancement.
  Do NOT modify this file. Modify the template
  file instead!!!!
=end

module Fox

   class FX4Splitter
     include Enhancement
     attr_accessor :_o     
   end
   def fx4_splitter name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FX4Splitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => FOURSPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => FOURSPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def tgt var; @os.op[@os.ii].tgt = var; end
         
         def sel var; @os.op[@os.ii].sel = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FX4Splitter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FX7Segment
     include Enhancement
     attr_accessor :_o     
   end
   def fx7_segment name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FX7Segment, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :opts => SEVENSEGMENT_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FX7Segment.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXAccelTable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_accel_table name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXAccelTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXAccelTable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXEvent
     include Enhancement
     attr_accessor :_o     
   end
   def fx_event name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXEvent, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXEvent.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXApp
     include Enhancement
     attr_accessor :_o     
   end
   def fx_app name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXApp, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:appName => "Application", :vendorName => "FoxDefault"})
         
         def app_name var; @os.op[@os.ii].appName = var; end
         
         def vendor_name var; @os.op[@os.ii].vendorName = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXApp.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXArrowButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_arrow_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXArrowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => ARROW_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXArrowButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXBMPIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxbmp_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBMPIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => Fox.FXRGB(192,192,192), :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXBMPIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXBMPImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxbmp_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBMPImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXBMPImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXBitmap
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmap, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :pixels => nil, :opts => 0, :width => 1, :height => 1})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXBitmap.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXBitmapFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap_frame name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmapFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :bmp => :required, :opts => FRAME_SUNKEN|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def bmp var; @os.op[@os.ii].bmp = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXBitmapFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXBitmapView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_bitmap_view name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXBitmapView, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :bmp => nil, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def bmp var; @os.op[@os.ii].bmp = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXBitmapView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :target => nil, :selector => 0, :opts => BUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXCURCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fxcur_cursor name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCURCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :pixels => :required})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXCURCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXCanvas
     include Enhancement
     attr_accessor :_o     
   end
   def fx_canvas name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXCanvas.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXCheckButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_check_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCheckButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :target => nil, :selector => 0, :opts => CHECKBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXCheckButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXChoiceBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_choice_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXChoiceBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :text => :required, :icon => :required, :choices => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def choices var; @os.op[@os.ii].choices = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXChoiceBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :title => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def title var; @os.op[@os.ii].title = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :clr => :required, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorItem.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => LIST_BROWSESELECT, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorRing
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_ring name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorRing, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorRing.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_selector name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorWell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_well name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorWell, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :color => 0, :target => nil, :selector => 0, :opts => COLORWELL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def color var; @os.op[@os.ii].color = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorWell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXColorWheel
     include Enhancement
     attr_accessor :_o     
   end
   def fx_color_wheel name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXColorWheel, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXColorWheel.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXComboBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_combo_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXComboBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => COMBOBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def cols var; @os.op[@os.ii].cols = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXComboBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXComposite
     include Enhancement
     attr_accessor :_o     
   end
   def fx_composite name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXComposite, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXComposite.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fx_cursor name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :curid => CURSOR_ARROW})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def curid var; @os.op[@os.ii].curid = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:a => :required, :pix => :required, :width => 32, :height => 32, :hotX => -1, :hotY => -1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def hot_x var; @os.op[@os.ii].hotX = var; end
         
         def hot_y var; @os.op[@os.ii].hotY = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:a => :required, :pixels => :required, :width => 32, :height => 32, :hotX => -1, :hotY => -1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def hot_x var; @os.op[@os.ii].hotX = var; end
         
         def hot_y var; @os.op[@os.ii].hotY = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSegment
     include Enhancement
     attr_accessor :_o     
   end
   def fx_segment name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSegment, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSegment.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXArc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_arc name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXArc, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXArc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDC
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDC, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDC.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPSBounds
     include Enhancement
     attr_accessor :_o     
   end
   def fxps_bounds name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPSBounds, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPSBounds.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPrinter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_printer name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPrinter, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPrinter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDCPrint
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc_print name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDCPrint, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDCPrint.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDCWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fxdc_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDCWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:drawable => :required, :event => nil})
         
         def drawable var; @os.op[@os.ii].drawable = var; end
         
         def event var; @os.op[@os.ii].event = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDCWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDataTarget
     include Enhancement
     attr_accessor :_o     
   end
   def fx_data_target name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDataTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:value => nil, :target => nil, :selector => 0})
         
         def value var; @os.op[@os.ii].value = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDataTarget.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDebugTarget
     include Enhancement
     attr_accessor :_o     
   end
   def fx_debug_target name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDebugTarget, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDebugTarget.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDelegator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_delegator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDelegator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:delegate => nil})
         
         def delegate var; @os.op[@os.ii].delegate = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDelegator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDial
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dial name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDial, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => DIAL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDial.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDialogBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dialog_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDialogBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :title => :required, :opts => DECOR_TITLE|DECOR_BORDER, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 10, :padRight => 10, :padTop => 10, :padBottom => 10, :hSpacing => 4, :vSpacing => 4})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def title var; @os.op[@os.ii].title = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDialogBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dict name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDirBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDirBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDirDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 500, :height => 300})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDirDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDirItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :oi => nil, :ci => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def oi var; @os.op[@os.ii].oi = var; end
         
         def ci var; @os.op[@os.ii].ci = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDirItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDirList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDirList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDirSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dir_selector name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDirSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDirSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDockBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def q var; @os.op[@os.ii].q = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDockBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDockHandler
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_handler name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockHandler, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => :required, :x => :required, :y => :required, :w => :required, :h => :required, :pl => :required, :pr => :required, :pt => :required, :pb => :required})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def tgt var; @os.op[@os.ii].tgt = var; end
         
         def sel var; @os.op[@os.ii].sel = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def w var; @os.op[@os.ii].w = var; end
         
         def h var; @os.op[@os.ii].h = var; end
         
         def pl var; @os.op[@os.ii].pl = var; end
         
         def pr var; @os.op[@os.ii].pr = var; end
         
         def pt var; @os.op[@os.ii].pt = var; end
         
         def pb var; @os.op[@os.ii].pb = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDockHandler.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDockSite
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_site name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockSite, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0, :hSpacing => 0, :vSpacing => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDockSite.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDockTitle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_dock_title name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDockTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL|JUSTIFY_CENTER_X|JUSTIFY_CENTER_Y, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDockTitle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDocument
     include Enhancement
     attr_accessor :_o     
   end
   def fx_document name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDocument, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDocument.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDragCorner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drag_corner name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDragCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDragCorner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDrawable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drawable name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDrawable, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDrawable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXDriveBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_drive_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXDriveBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXDriveBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXExtentd
     include Enhancement
     attr_accessor :_o     
   end
   def fx_extentd name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXExtentd, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:ext => :required})
         
         def ext var; @os.op[@os.ii].ext = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:lo => :required, :hi => :required})
         
         def lo var; @os.op[@os.ii].lo = var; end
         
         def hi var; @os.op[@os.ii].hi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:xlo => :required, :xhi => :required, :ylo => :required, :yhi => :required})
         
         def xlo var; @os.op[@os.ii].xlo = var; end
         
         def xhi var; @os.op[@os.ii].xhi = var; end
         
         def ylo var; @os.op[@os.ii].ylo = var; end
         
         def yhi var; @os.op[@os.ii].yhi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXExtentd.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXExtentf
     include Enhancement
     attr_accessor :_o     
   end
   def fx_extentf name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXExtentf, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:ext => :required})
         
         def ext var; @os.op[@os.ii].ext = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:lo => :required, :hi => :required})
         
         def lo var; @os.op[@os.ii].lo = var; end
         
         def hi var; @os.op[@os.ii].hi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:xlo => :required, :xhi => :required, :ylo => :required, :yhi => :required})
         
         def xlo var; @os.op[@os.ii].xlo = var; end
         
         def xhi var; @os.op[@os.ii].xhi = var; end
         
         def ylo var; @os.op[@os.ii].ylo = var; end
         
         def yhi var; @os.op[@os.ii].yhi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXExtentf.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 500, :height => 300})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileAssoc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_assoc name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileAssoc, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileAssoc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_dict name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :db => nil})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def db var; @os.op[@os.ii].db = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :bi => nil, :mi => nil, :ptr => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def bi var; @os.op[@os.ii].bi = var; end
         
         def mi var; @os.op[@os.ii].mi = var; end
         
         def ptr var; @os.op[@os.ii].ptr = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_selector name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFileStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_file_stream name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFileStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:cont => nil})
         
         def cont var; @os.op[@os.ii].cont = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFileStream.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFoldingItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_folding_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFoldingItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :openIcon => nil, :closedIcon => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def open_icon var; @os.op[@os.ii].openIcon = var; end
         
         def closed_icon var; @os.op[@os.ii].closedIcon = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFoldingItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFoldingList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_folding_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFoldingList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TREELIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFoldingList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFontDesc
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_desc name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontDesc, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFontDesc.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFont
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFont, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :fontDesc => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def font_desc var; @os.op[@os.ii].fontDesc = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:a => :required, :face => :required, :size => :required, :weight => FXFont::Normal, :slant => Font::Straight, :encoding => FONTENCODING_DEFAULT, :setWidth => FXFont::NonExpanded, :hints => 0})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def face var; @os.op[@os.ii].face = var; end
         
         def size var; @os.op[@os.ii].size = var; end
         
         def weight var; @os.op[@os.ii].weight = var; end
         
         def slant var; @os.op[@os.ii].slant = var; end
         
         def encoding var; @os.op[@os.ii].encoding = var; end
         
         def set_width var; @os.op[@os.ii].setWidth = var; end
         
         def hints var; @os.op[@os.ii].hints = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:a => :required, :string => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def string var; @os.op[@os.ii].string = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFont.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFontDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 600, :height => 380})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFontDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFontSelector
     include Enhancement
     attr_accessor :_o     
   end
   def fx_font_selector name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFontSelector, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFontSelector.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_frame name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGIFCursor
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_cursor name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFCursor, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => :required, :hx => -1, :hy => -1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def hx var; @os.op[@os.ii].hx = var; end
         
         def hy var; @os.op[@os.ii].hy = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGIFCursor.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGIFIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGIFIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGIFImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxgif_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGIFImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLCanvas
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_canvas name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLCanvas, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :vis => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:parent => :required, :vis => :required, :sharegroup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def sharegroup var; @os.op[@os.ii].sharegroup = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLCanvas.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLContext
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_context name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLContext, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :visual => :required, :other => nil})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def visual var; @os.op[@os.ii].visual = var; end
         
         def other var; @os.op[@os.ii].other = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLContext.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLObject
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_object name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLObject.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLShape
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_shape name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLShape, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :opts => :required, :front => nil, :back => nil})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def z var; @os.op[@os.ii].z = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def front var; @os.op[@os.ii].front = var; end
         
         def back var; @os.op[@os.ii].back = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLShape.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXViewport
     include Enhancement
     attr_accessor :_o     
   end
   def fx_viewport name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXViewport, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXViewport.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXLight
     include Enhancement
     attr_accessor :_o     
   end
   def fx_light name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXLight, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXLight.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMaterial
     include Enhancement
     attr_accessor :_o     
   end
   def fx_material name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMaterial, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMaterial.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLViewer
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_viewer name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLViewer, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :vis => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :vis => :required, :sharegroup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def sharegroup var; @os.op[@os.ii].sharegroup = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLViewer.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGLVisual
     include Enhancement
     attr_accessor :_o     
   end
   def fxgl_visual name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGLVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :flags => :required})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def flags var; @os.op[@os.ii].flags = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGLVisual.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGradient
     include Enhancement
     attr_accessor :_o     
   end
   def fx_gradient name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGradient, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGradient.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGradientBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_gradient_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGradientBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGradientBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXGroupBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_group_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXGroupBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :opts => GROUPBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXGroupBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXHeaderItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_header_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHeaderItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :ic => nil, :s => 0, :ptr => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def s var; @os.op[@os.ii].s = var; end
         
         def ptr var; @os.op[@os.ii].ptr = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXHeaderItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXHeader
     include Enhancement
     attr_accessor :_o     
   end
   def fx_header name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => HEADER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXHeader.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXHorizontalFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_horizontal_frame name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHorizontalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXHorizontalFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXICOIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxico_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXICOIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXICOIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXICOImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxico_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXICOImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXICOImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXIconDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_dict name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXIconDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXIconItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :bigIcon => nil, :miniIcon => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def big_icon var; @os.op[@os.ii].bigIcon = var; end
         
         def mini_icon var; @os.op[@os.ii].miniIcon = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXIconItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXIconList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => ICONLIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXIconList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXIconSource
     include Enhancement
     attr_accessor :_o     
   end
   def fx_icon_source name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXIconSource, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXIconSource.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXId
     include Enhancement
     attr_accessor :_o     
   end
   def fx_id name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXId, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXId.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXImage
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXImageFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image_frame name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImageFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :img => :required, :opts => FRAME_SUNKEN|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def img var; @os.op[@os.ii].img = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXImageFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXImageView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_image_view name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXImageView, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :img => nil, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def img var; @os.op[@os.ii].img = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXImageView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXInputDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_input_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXInputDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :label => :required, :icon => nil, :opts => INPUTDIALOG_STRING, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def label var; @os.op[@os.ii].label = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXInputDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXJPGIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxjpg_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXJPGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1, :quality => 75})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def quality var; @os.op[@os.ii].quality = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXJPGIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXJPGImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxjpg_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXJPGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1, :quality => 75})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def quality var; @os.op[@os.ii].quality = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXJPGImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXKnob
     include Enhancement
     attr_accessor :_o     
   end
   def fx_knob name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXKnob, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => KNOB_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXKnob.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXLabel
     include Enhancement
     attr_accessor :_o     
   end
   def fx_label name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXLabel, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :opts => LABEL_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXLabel.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXListItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXListItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :icon => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXListItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => LIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXListBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_list_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|LISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXListBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIDeleteButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_delete_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIDeleteButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIDeleteButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIRestoreButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_restore_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIRestoreButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIRestoreButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIMaximizeButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_maximize_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMaximizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIMaximizeButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIMinimizeButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_minimize_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMinimizeButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIMinimizeButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIWindowButton
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_window_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIWindowButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :pup => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def pup var; @os.op[@os.ii].pup = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIWindowButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIMenu
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_menu name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :target => nil})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIMenu.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIChild
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_child name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIChild, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :name => :required, :ic => nil, :pup => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def pup var; @os.op[@os.ii].pup = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIChild.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMDIClient
     include Enhancement
     attr_accessor :_o     
   end
   def fxmdi_client name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMDIClient, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMDIClient.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMainWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_main_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMainWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :title => :required, :icon => nil, :miniIcon => nil, :opts => DECOR_ALL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0, :hSpacing => 4, :vSpacing => 4})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def title var; @os.op[@os.ii].title = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def mini_icon var; @os.op[@os.ii].miniIcon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMainWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMatrix
     include Enhancement
     attr_accessor :_o     
   end
   def fx_matrix name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMatrix, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :n => 1, :opts => MATRIX_BY_ROWS, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def n var; @os.op[@os.ii].n = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMatrix.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMemoryBuffer
     include Enhancement
     attr_accessor :_o     
   end
   def fx_memory_buffer name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMemoryBuffer, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:data => :required})
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMemoryBuffer.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMemoryStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_memory_stream name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMemoryStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:cont => nil})
         
         def cont var; @os.op[@os.ii].cont = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMemoryStream.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def q var; @os.op[@os.ii].q = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :opts => :required, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT|MENUBUTTON_DOWN, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def popup_menu var; @os.op[@os.ii].popupMenu = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuCaption
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_caption name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCaption, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :opts => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuCaption.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuCascade
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_cascade name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCascade, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def popup_menu var; @os.op[@os.ii].popupMenu = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuCascade.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuCheck
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_check name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCheck, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuCheck.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuCommand
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_command name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuCommand, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuCommand.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuPane
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_pane name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :opts => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuPane.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuRadio
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_radio name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuRadio, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :target => nil, :selector => 0, :opts => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuRadio.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_separator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMenuTitle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_menu_title name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMenuTitle, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :icon => nil, :popupMenu => nil, :opts => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def popup_menu var; @os.op[@os.ii].popupMenu = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMenuTitle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXMessageBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_message_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXMessageBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :text => :required, :ic => nil, :opts => 0, :x => 0, :y => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXMessageBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXObject
     include Enhancement
     attr_accessor :_o     
   end
   def fx_object name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXObject, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXObject.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXOption
     include Enhancement
     attr_accessor :_o     
   end
   def fx_option name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXOption, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXOption.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXOptionMenu
     include Enhancement
     attr_accessor :_o     
   end
   def fx_option_menu name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXOptionMenu, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :pup => nil, :opts => JUSTIFY_NORMAL|ICON_BEFORE_TEXT, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def pup var; @os.op[@os.ii].pup = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXOptionMenu.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPCXIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxpcx_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPCXIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPCXIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPCXImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxpcx_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPCXImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPCXImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPNGIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxpng_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPNGIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPNGIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPNGImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxpng_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPNGImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPNGImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPPMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxppm_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPPMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPPMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxppm_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPPMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPacker
     include Enhancement
     attr_accessor :_o     
   end
   def fx_packer name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPacker, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPacker.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPicker
     include Enhancement
     attr_accessor :_o     
   end
   def fx_picker name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPicker, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :target => nil, :selector => 0, :opts => BUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPicker.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPopup
     include Enhancement
     attr_accessor :_o     
   end
   def fx_popup name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPopup, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :opts => POPUP_VERTICAL|FRAME_RAISED|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPopup.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXPrintDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_print_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXPrintDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXPrintDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXProgressBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_progress_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXProgressBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => PROGRESSBAR_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXProgressBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXProgressDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_progress_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXProgressDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :label => :required, :opts => PROGRESSDIALOG_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def label var; @os.op[@os.ii].label = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXProgressDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXQuatd
     include Enhancement
     attr_accessor :_o     
   end
   def fx_quatd name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXQuatd, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:axis => :required, :phi => 0.0})
         
         def axis var; @os.op[@os.ii].axis = var; end
         
         def phi var; @os.op[@os.ii].phi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :w => :required})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def z var; @os.op[@os.ii].z = var; end
         
         def w var; @os.op[@os.ii].w = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:floats => :required})
         
         def floats var; @os.op[@os.ii].floats = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[3] = OpenStruct.new({:roll => :required, :pitch => :required, :yaw => :required})
         
         def roll var; @os.op[@os.ii].roll = var; end
         
         def pitch var; @os.op[@os.ii].pitch = var; end
         
         def yaw var; @os.op[@os.ii].yaw = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[4] = OpenStruct.new({:ex => :required, :ey => :required, :ez => :required})
         
         def ex var; @os.op[@os.ii].ex = var; end
         
         def ey var; @os.op[@os.ii].ey = var; end
         
         def ez var; @os.op[@os.ii].ez = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXQuatd.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXQuatf
     include Enhancement
     attr_accessor :_o     
   end
   def fx_quatf name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXQuatf, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:axis => :required, :phi => 0.0})
         
         def axis var; @os.op[@os.ii].axis = var; end
         
         def phi var; @os.op[@os.ii].phi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:roll => :required, :pitch => :required, :yaw => :required})
         
         def roll var; @os.op[@os.ii].roll = var; end
         
         def pitch var; @os.op[@os.ii].pitch = var; end
         
         def yaw var; @os.op[@os.ii].yaw = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:ex => :required, :ey => :required, :ez => :required})
         
         def ex var; @os.op[@os.ii].ex = var; end
         
         def ey var; @os.op[@os.ii].ey = var; end
         
         def ez var; @os.op[@os.ii].ez = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[3] = OpenStruct.new({:mat => :required})
         
         def mat var; @os.op[@os.ii].mat = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[4] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :w => :required})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def z var; @os.op[@os.ii].z = var; end
         
         def w var; @os.op[@os.ii].w = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXQuatf.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRGBIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxrgb_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRGBIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRGBIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRGBImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxrgb_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRGBImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRGBImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRadioButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_radio_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRadioButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :text => :required, :target => nil, :selector => 0, :opts => RADIOBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRadioButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRanged
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ranged name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRanged, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xlo => 0.0, :xhi => 0.0, :ylo => 0.0, :yhi => 0.0, :zlo => 0.0, :zhi => 0.0})
         
         def xlo var; @os.op[@os.ii].xlo = var; end
         
         def xhi var; @os.op[@os.ii].xhi = var; end
         
         def ylo var; @os.op[@os.ii].ylo = var; end
         
         def yhi var; @os.op[@os.ii].yhi = var; end
         
         def zlo var; @os.op[@os.ii].zlo = var; end
         
         def zhi var; @os.op[@os.ii].zhi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:bounds => :required})
         
         def bounds var; @os.op[@os.ii].bounds = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:sphere => :required})
         
         def sphere var; @os.op[@os.ii].sphere = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRanged.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRangef
     include Enhancement
     attr_accessor :_o     
   end
   def fx_rangef name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRangef, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xlo => 0.0, :xhi => 0.0, :ylo => 0.0, :yhi => 0.0, :zlo => 0.0, :zhi => 0.0})
         
         def xlo var; @os.op[@os.ii].xlo = var; end
         
         def xhi var; @os.op[@os.ii].xhi = var; end
         
         def ylo var; @os.op[@os.ii].ylo = var; end
         
         def yhi var; @os.op[@os.ii].yhi = var; end
         
         def zlo var; @os.op[@os.ii].zlo = var; end
         
         def zhi var; @os.op[@os.ii].zhi = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:bounds => :required})
         
         def bounds var; @os.op[@os.ii].bounds = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:sphere => :required})
         
         def sphere var; @os.op[@os.ii].sphere = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRangef.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRealSlider
     include Enhancement
     attr_accessor :_o     
   end
   def fx_real_slider name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRealSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => REALSLIDER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRealSlider.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRealSpinner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_real_spinner name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRealSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => REALSPIN_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def cols var; @os.op[@os.ii].cols = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRealSpinner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRecentFiles
     include Enhancement
     attr_accessor :_o     
   end
   def fx_recent_files name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRecentFiles, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:a => :required, :gp => :required, :target => nil, :selector => 0})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def gp var; @os.op[@os.ii].gp = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRecentFiles.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRectangle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_rectangle name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRectangle, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :ww => :required, :hh => :required})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def hh var; @os.op[@os.ii].hh = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :s => :required})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def s var; @os.op[@os.ii].s = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:topleft => :required, :bottomright => :required})
         
         def topleft var; @os.op[@os.ii].topleft = var; end
         
         def bottomright var; @os.op[@os.ii].bottomright = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRectangle.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRegion
     include Enhancement
     attr_accessor :_o     
   end
   def fx_region name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRegion, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:r => :required})
         
         def r var; @os.op[@os.ii].r = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:rect => :required})
         
         def rect var; @os.op[@os.ii].rect = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :w => :required, :h => :required})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def w var; @os.op[@os.ii].w = var; end
         
         def h var; @os.op[@os.ii].h = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[3] = OpenStruct.new({:points => :required, :winding => false})
         
         def points var; @os.op[@os.ii].points = var; end
         
         def winding var; @os.op[@os.ii].winding = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRegion.new(*(os.op[os.ii].to_h.values)) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRegistry
     include Enhancement
     attr_accessor :_o     
   end
   def fx_registry name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRegistry, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:appKey => "", :vendorKey => ""})
         
         def app_key var; @os.op[@os.ii].appKey = var; end
         
         def vendor_key var; @os.op[@os.ii].vendorKey = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRegistry.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXReplaceDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_replace_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXReplaceDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :ic => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXReplaceDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRootWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_root_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRootWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :vis => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRootWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRuler
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ruler name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRuler, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => RULER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRuler.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXRulerView
     include Enhancement
     attr_accessor :_o     
   end
   def fx_ruler_view name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXRulerView, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXRulerView.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class NotifyHeader
     include Enhancement
     attr_accessor :_o     
   end
   def notify_header name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: NotifyHeader, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ NotifyHeader.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class SCNotification
     include Enhancement
     attr_accessor :_o     
   end
   def sc_notification name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: SCNotification, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ SCNotification.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class TextRange
     include Enhancement
     attr_accessor :_o     
   end
   def text_range name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: TextRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:start => :required, :last => :required, :size => :required})
         
         def start var; @os.op[@os.ii].start = var; end
         
         def last var; @os.op[@os.ii].last = var; end
         
         def size var; @os.op[@os.ii].size = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ TextRange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScintilla
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scintilla name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScintilla, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScintilla.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScrollArea
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_area name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollArea, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:parent => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def parent var; @os.op[@os.ii].parent = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScrollArea.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScrollBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => SCROLLBAR_VERTICAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScrollBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScrollCorner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_corner name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollCorner, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScrollCorner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScrollPane
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_pane name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollPane, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :nvis => :required, :opts => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def nvis var; @os.op[@os.ii].nvis = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScrollPane.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXScrollWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_scroll_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXScrollWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXScrollWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSearchDialog
     include Enhancement
     attr_accessor :_o     
   end
   def fx_search_dialog name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSearchDialog, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :caption => :required, :ic => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def caption var; @os.op[@os.ii].caption = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSearchDialog.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_separator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXHorizontalSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_horizontal_separator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHorizontalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 1, :padRight => 1, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXHorizontalSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVerticalSeparator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vertical_separator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVerticalSeparator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => SEPARATOR_GROOVE|LAYOUT_FILL_Y, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 1, :padBottom => 1})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVerticalSeparator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSettings
     include Enhancement
     attr_accessor :_o     
   end
   def fx_settings name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSettings, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSettings.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXShell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shell name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXShell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXShutterItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shutter_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShutterItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => "", :icon => nil, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXShutterItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXShutter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_shutter name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXShutter, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXShutter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSize
     include Enhancement
     attr_accessor :_o     
   end
   def fx_size name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSize, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:s => :required})
         
         def s var; @os.op[@os.ii].s = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:ww => :required, :hh => :required})
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def hh var; @os.op[@os.ii].hh = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSize.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSlider
     include Enhancement
     attr_accessor :_o     
   end
   def fx_slider name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSlider, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => SLIDER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 0, :padRight => 0, :padTop => 0, :padBottom => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSlider.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSphered
     include Enhancement
     attr_accessor :_o     
   end
   def fx_sphered name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSphered, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:otherSphere => :required})
         
         def other_sphere var; @os.op[@os.ii].otherSphere = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:cen => :required, :rad => 0.0})
         
         def cen var; @os.op[@os.ii].cen = var; end
         
         def rad var; @os.op[@os.ii].rad = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :rad => 0.0})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def z var; @os.op[@os.ii].z = var; end
         
         def rad var; @os.op[@os.ii].rad = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[3] = OpenStruct.new({:bounds => :required})
         
         def bounds var; @os.op[@os.ii].bounds = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSphered.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSpheref
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spheref name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpheref, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:otherSphere => :required})
         
         def other_sphere var; @os.op[@os.ii].otherSphere = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:cen => :required, :rad => 0.0})
         
         def cen var; @os.op[@os.ii].cen = var; end
         
         def rad var; @os.op[@os.ii].rad = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:x => :required, :y => :required, :z => :required, :rad => 0.0})
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def z var; @os.op[@os.ii].z = var; end
         
         def rad var; @os.op[@os.ii].rad = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[3] = OpenStruct.new({:bounds => :required})
         
         def bounds var; @os.op[@os.ii].bounds = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSpheref.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSpinner
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spinner name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpinner, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :cols => :required, :target => nil, :selector => 0, :opts => SPIN_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def cols var; @os.op[@os.ii].cols = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSpinner.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSplashWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_splash_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSplashWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :icon => :required, :opts => SPLASH_SIMPLE, :ms => 5000})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def ms var; @os.op[@os.ii].ms = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSplashWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSplitter
     include Enhancement
     attr_accessor :_o     
   end
   def fx_splitter name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSplitter, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => SPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :tgt => :required, :sel => :required, :opts => SPLITTER_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def tgt var; @os.op[@os.ii].tgt = var; end
         
         def sel var; @os.op[@os.ii].sel = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSplitter.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSpring
     include Enhancement
     attr_accessor :_o     
   end
   def fx_spring name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSpring, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :relw => 0, :relh => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def relw var; @os.op[@os.ii].relw = var; end
         
         def relh var; @os.op[@os.ii].relh = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSpring.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXStatusBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_status_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStatusBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => 4, :vSpacing => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXStatusBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXStatusLine
     include Enhancement
     attr_accessor :_o     
   end
   def fx_status_line name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStatusLine, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXStatusLine.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXStream
     include Enhancement
     attr_accessor :_o     
   end
   def fx_stream name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStream, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:cont => nil})
         
         def cont var; @os.op[@os.ii].cont = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXStream.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXStringDict
     include Enhancement
     attr_accessor :_o     
   end
   def fx_string_dict name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXStringDict, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXStringDict.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXSwitcher
     include Enhancement
     attr_accessor :_o     
   end
   def fx_switcher name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXSwitcher, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXSwitcher.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTGAIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxtga_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTGAIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTGAIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTGAImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxtga_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTGAImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTGAImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTIFIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxtif_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTIFIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTIFIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTIFImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxtif_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTIFImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTIFImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTabBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TABBOOK_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTabBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTabBook
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_book name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabBook, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TABBOOK_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTabBook.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTabItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tab_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTabItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text => :required, :ic => nil, :opts => TAB_TOP_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text var; @os.op[@os.ii].text = var; end
         
         def ic var; @os.op[@os.ii].ic = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTabItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTablePos
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_pos name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTablePos, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTablePos.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTableRange
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_range name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTableRange, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTableRange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTableItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTableItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :icon => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def icon var; @os.op[@os.ii].icon = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTableItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTable
     include Enhancement
     attr_accessor :_o     
   end
   def fx_table name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTable, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_MARGIN, :padRight => DEFAULT_MARGIN, :padTop => DEFAULT_MARGIN, :padBottom => DEFAULT_MARGIN})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTable.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXHiliteStyle
     include Enhancement
     attr_accessor :_o     
   end
   def fx_hilite_style name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXHiliteStyle, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXHiliteStyle.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTextChange
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text_change name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTextChange, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTextChange.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXText
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXText, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXText.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTextField
     include Enhancement
     attr_accessor :_o     
   end
   def fx_text_field name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTextField, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :ncols => :required, :target => nil, :selector => 0, :opts => TEXTFIELD_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def ncols var; @os.op[@os.ii].ncols = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTextField.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToggleButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_toggle_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToggleButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text1 => :required, :text2 => :required, :icon1 => nil, :icon2 => nil, :target => nil, :selector => 0, :opts => TOGGLEBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text1 var; @os.op[@os.ii].text1 = var; end
         
         def text2 var; @os.op[@os.ii].text2 = var; end
         
         def icon1 var; @os.op[@os.ii].icon1 = var; end
         
         def icon2 var; @os.op[@os.ii].icon2 = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToggleButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToolBar
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBar, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :q => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def q var; @os.op[@os.ii].q = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:p => :required, :opts => LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 3, :padRight => 3, :padTop => 2, :padBottom => 2, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToolBar.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToolBarGrip
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_grip name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarGrip, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TOOLBARGRIP_SINGLE, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToolBarGrip.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToolBarShell
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_shell name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarShell, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :opts => FRAME_RAISED|FRAME_THICK, :x => 0, :y => 0, :width => 0, :height => 0, :hSpacing => 4, :vSpacing => 4})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToolBarShell.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToolBarTab
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_bar_tab name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolBarTab, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_RAISED, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToolBarTab.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXToolTip
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tool_tip name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXToolTip, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:app => :required, :opts => TOOLTIP_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def app var; @os.op[@os.ii].app = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXToolTip.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTopWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_top_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTopWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTopWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTranslator
     include Enhancement
     attr_accessor :_o     
   end
   def fx_translator name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTranslator, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTranslator.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTreeItem
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_item name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeItem, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:text => :required, :openIcon => nil, :closedIcon => nil, :data => nil})
         
         def text var; @os.op[@os.ii].text = var; end
         
         def open_icon var; @os.op[@os.ii].openIcon = var; end
         
         def closed_icon var; @os.op[@os.ii].closedIcon = var; end
         
         def data var; @os.op[@os.ii].data = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTreeItem.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTreeList
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_list name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeList, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => TREELIST_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTreeList.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTreeListBox
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tree_list_box name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTreeListBox, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :target => nil, :selector => 0, :opts => FRAME_SUNKEN|FRAME_THICK|TREELISTBOX_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTreeListBox.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXTriStateButton
     include Enhancement
     attr_accessor :_o     
   end
   def fx_tri_state_button name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXTriStateButton, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :text1 => :required, :text2 => :required, :text3 => :required, :icon1 => nil, :icon2 => nil, :icon3 => nil, :target => nil, :selector => 0, :opts => TOGGLEBUTTON_NORMAL, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_PAD, :padRight => DEFAULT_PAD, :padTop => DEFAULT_PAD, :padBottom => DEFAULT_PAD})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def text1 var; @os.op[@os.ii].text1 = var; end
         
         def text2 var; @os.op[@os.ii].text2 = var; end
         
         def text3 var; @os.op[@os.ii].text3 = var; end
         
         def icon1 var; @os.op[@os.ii].icon1 = var; end
         
         def icon2 var; @os.op[@os.ii].icon2 = var; end
         
         def icon3 var; @os.op[@os.ii].icon3 = var; end
         
         def target var; @os.op[@os.ii].target = var; end
         
         def selector var; @os.op[@os.ii].selector = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXTriStateButton.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec2d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec2d name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec2d, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => 0.0, :yy => 0.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec2d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec2f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec2f name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec2f, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => 0.0, :yy => 0.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec2f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec3d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec3d name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec3d, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => 1.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def zz var; @os.op[@os.ii].zz = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec3d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec3f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec3f name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec3f, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => 1.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def zz var; @os.op[@os.ii].zz = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec3f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec4d
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec4d name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec4d, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => :required, :ww => 1.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def zz var; @os.op[@os.ii].zz = var; end
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:vec3d => :required, :ww => 1.0})
         
         def vec3d var; @os.op[@os.ii].vec3d = var; end
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec4d.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVec4f
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vec4f name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVec4f, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:xx => :required, :yy => :required, :zz => :required, :ww => 1.0})
         
         def xx var; @os.op[@os.ii].xx = var; end
         
         def yy var; @os.op[@os.ii].yy = var; end
         
         def zz var; @os.op[@os.ii].zz = var; end
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:vec3f => :required, :ww => 1.0})
         
         def vec3f var; @os.op[@os.ii].vec3f = var; end
         
         def ww var; @os.op[@os.ii].ww = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVec4f.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVerticalFrame
     include Enhancement
     attr_accessor :_o     
   end
   def fx_vertical_frame name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVerticalFrame, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => DEFAULT_SPACING, :padRight => DEFAULT_SPACING, :padTop => DEFAULT_SPACING, :padBottom => DEFAULT_SPACING, :hSpacing => DEFAULT_SPACING, :vSpacing => DEFAULT_SPACING})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVerticalFrame.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXVisual
     include Enhancement
     attr_accessor :_o     
   end
   def fx_visual name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXVisual, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :flgs => :required, :d => 32})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def flgs var; @os.op[@os.ii].flgs = var; end
         
         def d var; @os.op[@os.ii].d = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXVisual.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXWindow
     include Enhancement
     attr_accessor :_o     
   end
   def fx_window name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXWindow, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:p => :required, :opts => 0, :x => 0, :y => 0, :width => 0, :height => 0})
         
         def p var; @os.op[@os.ii].p = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[1] = OpenStruct.new({:a => :required, :vis => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def vis var; @os.op[@os.ii].vis = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
     
         @os.op[2] = OpenStruct.new({:a => :required, :own => :required, :opts => :required, :x => :required, :y => :required, :w => :required, :h => :required})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def own var; @os.op[@os.ii].own = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def w var; @os.op[@os.ii].w = var; end
         
         def h var; @os.op[@os.ii].h = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXWindow.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXWizard
     include Enhancement
     attr_accessor :_o     
   end
   def fx_wizard name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXWizard, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:owner => :required, :name => :required, :image => :required, :opts => DECOR_TITLE|DECOR_BORDER|DECOR_RESIZE, :x => 0, :y => 0, :width => 0, :height => 0, :padLeft => 10, :padRight => 10, :padTop => 10, :padBottom => 10, :hSpacing => 10, :vSpacing => 10})
         
         def owner var; @os.op[@os.ii].owner = var; end
         
         def name var; @os.op[@os.ii].name = var; end
         
         def image var; @os.op[@os.ii].image = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def x var; @os.op[@os.ii].x = var; end
         
         def y var; @os.op[@os.ii].y = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def pad_left var; @os.op[@os.ii].padLeft = var; end
         
         def pad_right var; @os.op[@os.ii].padRight = var; end
         
         def pad_top var; @os.op[@os.ii].padTop = var; end
         
         def pad_bottom var; @os.op[@os.ii].padBottom = var; end
         
         def h_spacing var; @os.op[@os.ii].hSpacing = var; end
         
         def v_spacing var; @os.op[@os.ii].vSpacing = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXWizard.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXXBMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxxbm_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXBMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :mask => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def mask var; @os.op[@os.ii].mask = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXXBMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXXBMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxxbm_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXBMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pixels => nil, :mask => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pixels var; @os.op[@os.ii].pixels = var; end
         
         def mask var; @os.op[@os.ii].mask = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXXBMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXXPMIcon
     include Enhancement
     attr_accessor :_o     
   end
   def fxxpm_icon name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXPMIcon, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :clr => 0, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def clr var; @os.op[@os.ii].clr = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXXPMIcon.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

   class FXXPMImage
     include Enhancement
     attr_accessor :_o     
   end
   def fxxpm_image name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: FXXPMImage, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     
     
         @os.op[0] = OpenStruct.new({:a => :required, :pix => nil, :opts => 0, :width => 1, :height => 1})
         
         def a var; @os.op[@os.ii].a = var; end
         
         def pix var; @os.op[@os.ii].pix = var; end
         
         def opts var; @os.op[@os.ii].opts = var; end
         
         def width var; @os.op[@os.ii].width = var; end
         
         def height var; @os.op[@os.ii].height = var; end
         
         def instance a=nil, &block
            @os.instance_name = a
            @os.instance_block = block
         end
          
     self.instance_eval &block
     
     os.fx = ->(){ FXXPMImage.new(*([pos.inst] + os.op[os.ii].to_h.values[1..-1])) }
     
                                              
     Enhancement.stack.pop
   end

end
