# coding: utf-8
=begin rdoc

NOTE WELL:
  This file is generated by fxruby-enhancement.
  Do NOT modify this file. Modify the template
  file instead!!!!
=end

module Fox
  module Enhancement
    module Mapper
      class << self
        def fox_classes
          Fox.constants.select { |k|
            Fox.const_get(k).instance_of? Class
          }
        end

        def fox_initialize_parms
          fox_classes.map { |klass|
            [klass, Fox.const_get(klass)
                .instance_method(:initialize)
                .parameters
                .map{ |typ, nam|
               unless typ == :rest
                 [typ, nam]
               else
                 [:rest,
                  parm_hints(klass).map{ |parm| [:req, parm] }
                 ]
               end
             }
            ]
          }
        end
         
        HINTS = {
        }
        
        def parm_hints klass
          HINTS[klass]
        end        
      end
    end
  end

# Here we include enhancements to all FXRuby classes
<% for @class, @details in @api %>
   class <%= @class %>
     include Enhancement
     attr_accessor :_o     
   end
   def <%= @class.snake %> name = nil, ii: 0, &block
     pos = Enhancement.stack.last
     Enhancement.stack << (@os = os = OpenStruct.new(klass: <%= @class %>, op: [], ii: ii, fx: nil, kinder: [], inst: nil))
     unless pos.nil?
       pos.kinder << os 
     else
       Enhancement.base = os
     end
     <% @i=0 %>
     <% for @iniparams in @details[:initialize].compact %>
         <%= "@os.op[#{@i}]" %> = OpenStruct.new({<%= @iniparams.map{ |p,d| [p, d ? d : ":required"] }
                                                             .map{ |p,d| ":#{p} => #{d}"}
                                                             .join(', ') %>})
         <% for @param, @default in @iniparams %>
         def <%= "#{@param.snake}" %> var; @os.op[@os.ii].<%= "#{@param}" %> = var; end
         <% end %>
         def instance a=nil, &block
            @os.op[@os.ii].instance_name = a
            @os.op[@os.ii].instance_block = block
         end
     <% @i+=1; end unless @details[:initialize].nil? %>     
     self.instance_eval &block
     os.fx = ->(){ <%= @class %>.new(*([pos] + os.op[os.ii].to_h.values[1..-1])) }
     Enhancement.stack.pop
   end
<% end %>
end 
